// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package fixtures

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes(".", "fixtures.go", "\"cGFja2FnZSBmaXh0dXJlcwoKaW1wb3J0ICgKCSJ0ZXN0aW5nIgoKCSJnaXRodWIuY29tL2dvYnVmZmFsby9wYWNrciIKCSJnaXRodWIuY29tL3N0cmV0Y2hyL3Rlc3RpZnkvcmVxdWlyZSIKKQoKY29uc3QgR2V0SXRlbXNGaXh0dXJlID0gImdldC1pdGVtcy5qc29uIgpjb25zdCBHZXRMYWRkZXJGaXh0dXJlID0gImdldC1sYWRkZXIuanNvbiIKY29uc3QgRW1wdHlJdGVtc0ZpeHR1cmUgPSAibGlmZWN5Y2xlL2dldC1pdGVtcy5lbXB0eS5qc29uIgpjb25zdCBGdWxsSXRlbXNGaXh0dXJlID0gImxpZmVjeWNsZS9nZXQtaXRlbXMuZnVsbC5qc29uIgpjb25zdCBHZXRQYXNzaXZlc0ZpeHR1cmUzNCA9ICJnZXQtcGFzc2l2ZS1za2lsbHMuanNvbiIKCnZhciBib3ggPSBwYWNrci5OZXdCb3goIi4iKQoKLy8gRml4dHVyZUJ5dGVzIHJldHVybnMgdGhlIGJ5dGVzIGZyb20gYSBmaWxlIHJlbGF0aXZlIHRvIHRoZSBmaXh0dXJlcyBkaXJlY3RvcnkKZnVuYyBGaXh0dXJlQnl0ZXModCAqdGVzdGluZy5ULCBmaXh0dXJlIHN0cmluZykgW11ieXRlIHsKCWlmIHQgIT0gbmlsIHsKCQl0LkxvZyhmaXh0dXJlKQoJfQoJYmxvYiwgZXJyIDo9IGJveC5NdXN0Qnl0ZXMoZml4dHVyZSkKCWlmIHQgIT0gbmlsIHsKCQlyZXF1aXJlLk5vRXJyb3IodCwgZXJyLCAicmVhZGluZyBmaXh0dXJlIGZpbGUiKQoJfQoKCXJldHVybiBibG9iCn0K\"")
	packr.PackJSONBytes(".", "get-items.json", "\"{
  "items": [
    {
      "verified": false,
      "w": 2,
      "h": 2,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Armours/Gloves/GlovesStrDex3.png?scale=1&w=2&h=2&v=26a9b159a1a53e0cae79d30d6fa50cdd",
      "league": "Standard",
      "id": "8ec0eb5e0e8af4573ee0b1014a9d1a684c0d9d8a6b229614c9e091f3fa04c41f",
      "influences": {
        "elder": true
      },
      "elder": true,
      "sockets": [
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 0,
          "attr": "S",
          "sColour": "R"
        },
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        }
      ],
      "name": "Bramble Fingers",
      "typeLine": "Dragonscale Gauntlets",
      "identified": true,
      "ilvl": 76,
      "properties": [
        {
          "name": "Quality",
          "values": [
            [
              "+20%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Armour",
          "values": [
            [
              "168",
              1
            ]
          ],
          "displayMode": 0,
          "type": 16
        },
        {
          "name": "Evasion Rating",
          "values": [
            [
              "169",
              1
            ]
          ],
          "displayMode": 0,
          "type": 17
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "70",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Str",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Dex",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "23",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "explicitMods": [
        "Socketed Gems have 16% more Attack and Cast Speed",
        "+22 to Dexterity",
        "+19 to Armour",
        "+20 to Evasion Rating",
        "+28% to Lightning Resistance"
      ],
      "craftedMods": [
        "+45 to maximum Life"
      ],
      "enchantMods": [
        "Trigger Commandment of the Grave when your Skills or Minions Kill"
      ],
      "frameType": 2,
      "x": 0,
      "y": 0,
      "inventoryId": "Gloves",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/FasterAttacks.png?scale=1&w=1&h=1&v=c14203f7b19650861907a30a92e3b6fe",
          "support": true,
          "id": "5b2d76db8156e06a56c34199d44e00250098722ee836614701377bc76f7c2a14",
          "name": "",
          "typeLine": "Faster Attacks Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Attack, Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "115%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Quality",
              "values": [
                [
                  "+9%",
                  1
                ]
              ],
              "displayMode": 0,
              "type": 6
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports attack skills.",
          "explicitMods": [
            "Supported Skills have 48% increased Attack Speed"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/FortifyGem.png?scale=1&w=1&h=1&v=6a69853aaf7278667bde43531541ef7d",
          "support": true,
          "id": "324850593683a0f20de933db05e8160f218fcc5457274dd8555d39183c52e247",
          "name": "",
          "typeLine": "Fortify Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Attack, Support, Melee",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "130%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports melee attack skills that are not triggered.",
          "explicitMods": [
            "Supported Skills grant Fortify on Melee hit",
            "Supported Skills have 34% increased Fortify duration",
            "Supported Skills deal 34% more Damage with Ailments caused by Melee Hits",
            "Supported Skills deal 34% more Melee Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "S"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/CullingStrike.png?scale=1&w=1&h=1&v=7cb756ed033b6073986fd8babfc10f43",
          "support": true,
          "id": "c48abfe1cb32da0046b949350dae15920634c538494f0cc15ba2653acdab011a",
          "name": "",
          "typeLine": "Culling Strike Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "110%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill that hits enemies. If enemies are left below 10% of maximum life after being hit by these skills, they will be killed.",
          "explicitMods": [
            "Kill Enemies that have 10% Life or lower when Hit by Supported Skills",
            "Supported Skills deal 38% increased Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/WhirlingBlades.png?scale=1&w=1&h=1&v=e45604e808bc98f512fd4818265cdd7a",
          "support": false,
          "id": "3f8caab83d98bd29d977539fc88a193c5a862835f213267bcdbca0ea3bbd8cb1",
          "name": "",
          "typeLine": "Whirling Blades",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Attack, Movement, Travel, Melee",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "4",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "10",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Effectiveness of Added Damage",
              "values": [
                [
                  "103%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "111192/111192",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 1,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "21",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "33",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "23",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "nextLevelRequirements": [
            {
              "name": "Level",
              "values": [
                [
                  "25",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "38",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "26",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Dive through enemies, dealing weapon damage. Only works with daggers, claws and one handed swords. Cannot be supported by Multistrike.",
          "explicitMods": [
            "Deals 103.2% of Base Damage",
            "+0.6 seconds to Attack Time"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 3,
          "colour": "D"
        }
      ]
    },
    {
      "verified": false,
      "w": 2,
      "h": 3,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Armours/Shields/Riseofthephoenix.png?scale=1&w=2&h=3&v=c7717c4e01b7e50687616c686503971c",
      "league": "Standard",
      "id": "e08ce4c306f2f9c67a86ea6f0761b14b2dddc20a701c97232ad30ea36f6144cd",
      "sockets": [
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "S",
          "sColour": "R"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        }
      ],
      "name": "Rise of the Phoenix",
      "typeLine": "Mosaic Kite Shield",
      "identified": true,
      "ilvl": 69,
      "properties": [
        {
          "name": "Quality",
          "values": [
            [
              "+20%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Chance to Block",
          "values": [
            [
              "24%",
              0
            ]
          ],
          "displayMode": 0,
          "type": 15
        },
        {
          "name": "Armour",
          "values": [
            [
              "322",
              1
            ]
          ],
          "displayMode": 0,
          "type": 16
        },
        {
          "name": "Energy Shield",
          "values": [
            [
              "61",
              1
            ]
          ],
          "displayMode": 0,
          "type": 18
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "72",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Str",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "121",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "implicitMods": [
        "+8% to all Elemental Resistances"
      ],
      "explicitMods": [
        "99% increased Armour and Energy Shield",
        "+50 to maximum Life",
        "Regenerate 17.5 Life per second",
        "+5% to maximum Fire Resistance",
        "+24% to Fire Resistance",
        "+25% to Fire Resistance while on Low Life",
        "10% increased Movement Speed when on Low Life",
        "Cannot be Ignited while on Low Life"
      ],
      "flavourText": [
        "My bearer shall be guarded by flame,\r",
        "for I am the phoenix, forever radiant in glory."
      ],
      "frameType": 3,
      "x": 0,
      "y": 0,
      "inventoryId": "Offhand",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/FrostFury.png?scale=1&w=1&h=1&v=77aaabfbb4c1bebcd8e2147b8cec9ffd",
          "support": false,
          "id": "d0f768dbfccb05e6a2fd238985669abb3772bbcc1ca43eaf295ecd1b679fb53a",
          "name": "",
          "typeLine": "Winter Orb",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Cold, Spell, Channelling, AoE, Duration, Projectile",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "12",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "3",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.25 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Critical Strike Chance",
              "values": [
                [
                  "6.00%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Effectiveness of Added Damage",
              "values": [
                [
                  "50%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "936487/1956648",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.4786180257797241,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "54",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "121",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Channel to conjure an orb above you, which pelts nearby enemies with projectiles that impact the ground and explode. Channelling for longer builds up stages on the skill. When you stop channelling, the stages decay over a duration.",
          "explicitMods": [
            "Deals 113 to 141 Cold Damage",
            "Base duration is 1.20 seconds",
            "Increases and Reductions to Cast Speed also apply to Projectile Frequency",
            "Fires projectiles every 1.6 seconds",
            "25% increased Duration per Stage",
            "100% more Projectile Frequency while Channelling",
            "15% increased Projectile Frequency per Stage",
            "Maximum 10 Stages"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/IncreasedDuration.png?scale=1&w=1&h=1&v=14b3a91933f0b921d1b573358e31f768",
          "support": true,
          "id": "8a88e96541356b2ff2eaf47013f08e5212623b09bcda32edd98cec0b29d70515",
          "name": "",
          "typeLine": "Increased Duration Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Support, Duration",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "140%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill with a duration.",
          "explicitMods": [
            "Supported Skills have 64% increased Skill Effect Duration"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "S"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/FasterCast.png?scale=1&w=1&h=1&v=f70e30cd3755d11a81103b70957e579c",
          "support": true,
          "id": "bbd9e7fb2a802b1cbbc835360d6110ae3d0b6bdce8b6a126987486ce4a7311b2",
          "name": "",
          "typeLine": "Faster Casting Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Support, Spell",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "21 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "120%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "72",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "114",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports non-instant spell skills.",
          "explicitMods": [
            "Supported Skills have 40% increased Cast Speed"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "I"
        }
      ]
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Rings/Empty-Socket.png?scale=1&w=1&h=1&v=3671f6d79d7190b43879b830e63fc078",
      "league": "Standard",
      "id": "d2dc63fa70eecdba73870ca674b6247a55a1748eea896de74af2318e3614135b",
      "sockets": [
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        }
      ],
      "name": "Plague Circle",
      "typeLine": "Unset Ring",
      "identified": true,
      "ilvl": 67,
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "70",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Int",
          "values": [
            [
              "155",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "implicitMods": [
        "Has 1 Socket"
      ],
      "explicitMods": [
        "+2 to Level of Socketed Gems",
        "Adds 4 to 6 Physical Damage to Attacks",
        "+52 to maximum Life",
        "14% increased Rarity of Items found",
        "+40% to Fire Resistance"
      ],
      "craftedMods": [
        "+24 to Strength"
      ],
      "frameType": 2,
      "x": 0,
      "y": 0,
      "inventoryId": "Ring",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Clarity.png?scale=1&w=1&h=1&v=f609c128e5ee053e773b391625757d6a",
          "support": false,
          "id": "541db537c188575346f9d5184593f25bbf894dd300640a11867abfbca9798fd2",
          "name": "",
          "typeLine": "Clarity",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Aura, Spell, AoE",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Reserved",
              "values": [
                [
                  "279",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cooldown Time",
              "values": [
                [
                  "1.20 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "Instant",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "155",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Casts an aura that grants mana regeneration to you and your allies.",
          "explicitMods": [
            "+19 to radius",
            "You and nearby Allies Regenerate 33 Mana per second"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "I"
        }
      ]
    },
    {
      "verified": false,
      "w": 2,
      "h": 2,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Armours/Helmets/HelmetStrInt7.png?scale=1&w=2&h=2&v=bf2963e78379f6eb35bbfede3ade0164",
      "league": "Standard",
      "id": "d57e1cd86f2182a45f3322f8c2e9eba8bf863d603fab50b34d320bd0e9809647",
      "sockets": [
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        }
      ],
      "name": "Skull Visage",
      "typeLine": "Great Crown",
      "identified": true,
      "ilvl": 57,
      "properties": [
        {
          "name": "Quality",
          "values": [
            [
              "+20%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Armour",
          "values": [
            [
              "242",
              1
            ]
          ],
          "displayMode": 0,
          "type": 16
        },
        {
          "name": "Energy Shield",
          "values": [
            [
              "39",
              1
            ]
          ],
          "displayMode": 0,
          "type": 18
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "70",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Str",
          "values": [
            [
              "68",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Dex",
          "values": [
            [
              "54",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "explicitMods": [
        "20% increased Armour and Energy Shield",
        "+89 to maximum Life",
        "+33% to Cold Resistance",
        "+10% to Lightning Resistance"
      ],
      "craftedMods": [
        "+30 to Armour"
      ],
      "enchantMods": [
        "Bone Offering grants an additional +6% Chance to Block Attack Damage"
      ],
      "frameType": 2,
      "x": 0,
      "y": 0,
      "inventoryId": "Helm",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/CullingStrike.png?scale=1&w=1&h=1&v=7cb756ed033b6073986fd8babfc10f43",
          "support": true,
          "id": "2f5c8df56094394d1aa29ce3b1b5a98063eaae76a603124eb52ff203af5c7251",
          "name": "",
          "typeLine": "Culling Strike Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "5",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "110%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "320672/320672",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 1,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "32",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "54",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "nextLevelRequirements": [
            {
              "name": "Level",
              "values": [
                [
                  "35",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "58",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill that hits enemies. If enemies are left below 10% of maximum life after being hit by these skills, they will be killed.",
          "explicitMods": [
            "Kill Enemies that have 10% Life or lower when Hit by Supported Skills",
            "Supported Skills deal 8% increased Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/BallLightning.png?scale=1&w=1&h=1&v=4ee98cc1e04430cfd45639ae1ad55a38",
          "support": false,
          "id": "00dc10e167a7c27f7512b9521af8d6d3351dc08db88b1df6e8c73a321b78f346",
          "name": "",
          "typeLine": "Ball Lightning",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Spell, Projectile, AoE, Lightning",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "2",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "14",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.75 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Critical Strike Chance",
              "values": [
                [
                  "5.00%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Effectiveness of Added Damage",
              "values": [
                [
                  "40%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "285815/285815",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 1,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "31",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "73",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "nextLevelRequirements": [
            {
              "name": "Level",
              "values": [
                [
                  "34",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "79",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Fires a slow-moving projectile that periodically damages enemies in an area around it with bolts of lightning.",
          "explicitMods": [
            "Deals 3 to 58 Lightning Damage"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/CurseOnHit.png?scale=1&w=1&h=1&v=3b4d00a3f5e38dc9131148d76ba81cd9",
          "support": true,
          "id": "7cce1749e35085f8eaa55cc96d5253c44fd67c81ddefab5d8d9fbb4f0133c2d1",
          "name": "",
          "typeLine": "Curse On Hit Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Curse, Trigger, Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Must support both a skill that hits enemies, and a curse skill to work. The curse will be applied when enemies are hit by the other skill. Cannot support totems, traps, or mines. Minions cannot apply curses this way.",
          "explicitMods": [
            "Supported Skills apply supported Curses on Hit",
            "You cannot Cast Supported Curses",
            "Supported Skills have 12% reduced Curse Duration"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Flammability.png?scale=1&w=1&h=1&v=6fbf7cfcddcc267b1f44fb84314dbe04",
          "support": false,
          "id": "c6e8c74ab9a16942fb5fd48fd4134973166c8f5c4e06d8c10341afa1b1a27c07",
          "name": "",
          "typeLine": "Flammability",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Spell, AoE, Duration, Curse, Fire",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "50",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.50 sec",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "98",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Curses all targets in an area, making them less resistant to fire damage and giving them a chance to be ignited by fire damage.",
          "explicitMods": [
            "Base duration is 10.90 seconds",
            "+10 to radius",
            "Cursed enemies have -44% to Fire Resistance",
            "Cursed enemies have +14% chance to be Ignited by Fire Damage"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 3,
          "colour": "I"
        }
      ]
    },
    {
      "verified": false,
      "w": 2,
      "h": 3,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Armours/BodyArmours/VisMortis.png?scale=1&w=2&h=3&v=d9655cd289589716bb4560bbcc5da0e3",
      "league": "Standard",
      "id": "6f87f5cbc0b663aea40626c6f526145212d7599097b84c69f38e36990a4c1121",
      "sockets": [
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 1,
          "attr": "I",
          "sColour": "B"
        }
      ],
      "name": "Vis Mortis",
      "typeLine": "Necromancer Silks",
      "identified": true,
      "ilvl": 75,
      "properties": [
        {
          "name": "Energy Shield",
          "values": [
            [
              "352",
              1
            ]
          ],
          "displayMode": 0,
          "type": 18
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "72",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Dex",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "160",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "explicitMods": [
        "201% increased Energy Shield",
        "+29 to maximum Mana",
        "Minions have 20% reduced maximum Life",
        "Minions deal 15% increased Damage",
        "+1 to maximum number of Spectres",
        "Minions gain Unholy Might for 10 seconds on Kill"
      ],
      "flavourText": [
        "Reap what others have sown\r",
        "Muster them from their graves\r",
        "Parade them for your pleasure\r",
        "Zealots in mortis enslaved"
      ],
      "frameType": 3,
      "x": 0,
      "y": 0,
      "inventoryId": "BodyArmour",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/RaiseSpectre.png?scale=1&w=1&h=1&v=24789a9ecaa587b4188a0272d0aad5ab",
          "support": false,
          "id": "92934e70c6736e02eadefb9f133de35681e1a3034123861d3318b1118c02344b",
          "name": "",
          "typeLine": "Raise Spectre",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Spell, Minion",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "28",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.85 sec",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "155",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Raises a spectral version of a defeated foe as a minion to fight for you in battle.",
          "explicitMods": [
            "Minions have +30% to all Elemental Resistances",
            "Maximum 2 Raised Spectres",
            "55% more Minion Movement Speed",
            "Minion Movement Speed is Capped",
            "Raised Spectres are Level 80",
            "Minions have 1109 additional Accuracy Rating"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/MinionDamage.png?scale=1&w=1&h=1&v=11a6290e7598371f80750a036c07cc38",
          "support": true,
          "id": "740556630e053e7b9ea7adbce0c07d961f1b3e0c1e3b154d7ce2c6696094fd20",
          "name": "",
          "typeLine": "Minion Damage Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Support, Minion",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "21 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "130%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "72",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "114",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports skills which create Minions.",
          "explicitMods": [
            "Minions from Supported Skills deal 50% more Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/ElementalFocus.png?scale=1&w=1&h=1&v=90c05eda67f11a43b95d22d7d770d115",
          "support": true,
          "id": "4754561e600c5925da5290a61f1e5e628c152c1dfb3763066bb5ffd2cf29b698",
          "name": "",
          "typeLine": "Elemental Focus Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "130%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Quality",
              "values": [
                [
                  "+6%",
                  1
                ]
              ],
              "displayMode": 0,
              "type": 6
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill that hits or burns enemies.",
          "explicitMods": [
            "Supported Skills deal 49% more Elemental Damage",
            "Supported Skills cannot inflict Elemental Ailments",
            "Supported Skills deal 3% increased Elemental Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/GreaterMultipleProjectiles.png?scale=1&w=1&h=1&v=e1b6fb26e5937957e08ce80e113f41e2",
          "support": true,
          "id": "471ab25be1c937f7f9e9ac26778bf32c9d9282998f7f9ea0cc060a6eb9e4b2f3",
          "name": "",
          "typeLine": "Greater Multiple Projectiles Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Support, Projectile",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "165%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports projectile skills.",
          "explicitMods": [
            "Supported Skills deal 26% less Projectile Damage",
            "Supported Skills fire 4 additional Projectiles"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 3,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/Echo.png?scale=1&w=1&h=1&v=17265fb12263fca341ddc443a242d306",
          "support": true,
          "id": "7e0be9f09ff23377edca397ed217f70825c1da62474ba9360dd0fcf748058ea1",
          "name": "",
          "typeLine": "Spell Echo Support",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Spell, Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "140%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Quality",
              "values": [
                [
                  "+5%",
                  1
                ]
              ],
              "displayMode": 0,
              "type": 6
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports spell skills, making them repeat when cast. Cannot support Vaal skills, totem skills, channelling skills, triggered skills, instant skills, or skills which reserve mana.",
          "explicitMods": [
            "Supported Skills deal 10% less Damage",
            "Supported Skills Repeat an additional time",
            "Supported Skills have 70% more Cast Speed",
            "Supported Skills deal 2% increased Spell Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 4,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Convocation.png?scale=1&w=1&h=1&v=2802374e60634608f3d266072f97df41",
          "support": false,
          "id": "7ceb2e20145a47aa6fddcd871ec88c733e5d60d32376dcea2a91ecbcfe6c492c",
          "name": "",
          "typeLine": "Convocation",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Minion, Spell, Duration",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "13",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cooldown Time",
              "values": [
                [
                  "3.00 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "Instant",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "155",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Recalls all minions that are following you to your location, and grants them a temporary life regeneration effect.",
          "explicitMods": [
            "Base duration is 2.00 seconds",
            "Regenerate 1.65% of Life per second"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 5,
          "colour": "I"
        }
      ]
    },
    {
      "verified": false,
      "w": 2,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Belts/BiscosLeash.png?scale=1&w=2&h=1&v=75329e5f2855d55be4593a30aaead9fd",
      "league": "Standard",
      "id": "a8098c90a9b30cb5348376bb2275ebedbfb4c230c0689f288707e30a437e333e",
      "name": "Bisco's Leash",
      "typeLine": "Heavy Belt",
      "identified": true,
      "ilvl": 84,
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "30",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "implicitMods": [
        "+27 to Strength"
      ],
      "explicitMods": [
        "5% increased Quantity of Items found",
        "+29% to Cold Resistance",
        "1% increased Rarity of Items found per 15 Rampage Kills",
        "Rampage"
      ],
      "flavourText": [
        "You were always there, by my side,\r",
        "whether we sat or played.\r",
        "Our friendship was a joyful ride,\r",
        "I wish you could have stayed."
      ],
      "frameType": 3,
      "x": 0,
      "y": 0,
      "inventoryId": "Belt"
    },
    {
      "verified": false,
      "w": 2,
      "h": 2,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Weapons/OneHandWeapons/Claws/Clawshield3.png?scale=1&w=2&h=2&v=6bcb10631c51c4aeaf11345bb6041ed1",
      "league": "Standard",
      "id": "4051eb6e464105f01925128f87f13cfef203fadf56c8253fc616915514a5cd08",
      "sockets": [
        {
          "group": 0,
          "attr": "S",
          "sColour": "R"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 1,
          "attr": "D",
          "sColour": "G"
        }
      ],
      "name": "Advancing Fortress",
      "typeLine": "Gut Ripper",
      "identified": true,
      "ilvl": 55,
      "properties": [
        {
          "name": "Claw",
          "values": [],
          "displayMode": 0
        },
        {
          "name": "Quality",
          "values": [
            [
              "+20%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Physical Damage",
          "values": [
            [
              "44-117",
              1
            ]
          ],
          "displayMode": 0,
          "type": 9
        },
        {
          "name": "Critical Strike Chance",
          "values": [
            [
              "6.30%",
              0
            ]
          ],
          "displayMode": 0,
          "type": 12
        },
        {
          "name": "Attacks per Second",
          "values": [
            [
              "1.50",
              0
            ]
          ],
          "displayMode": 0,
          "type": 13
        },
        {
          "name": "Weapon Range",
          "values": [
            [
              "11",
              0
            ]
          ],
          "displayMode": 0,
          "type": 14
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "70",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Str",
          "values": [
            [
              "70",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Dex",
          "values": [
            [
              "98",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "151",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "implicitMods": [
        "+44 Life gained for each Enemy hit by Attacks"
      ],
      "explicitMods": [
        "Socketed Gems are Supported by Level 12 Fortify",
        "15% Chance to Block Attack Damage",
        "101% increased Physical Damage",
        "+110 to Evasion Rating",
        "+35 to maximum Energy Shield",
        "+46 to maximum Life",
        "Reflects 82 Physical Damage to Melee Attackers"
      ],
      "flavourText": [
        "\"A man cowers behind his walls.\r",
        "A woman carries her fortress with her.\r",
        "In heart, in mind, in hand.\"\r",
        "- Sekhema Deshret"
      ],
      "frameType": 3,
      "x": 0,
      "y": 0,
      "inventoryId": "Weapon",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/CastOnDmgTaken.png?scale=1&w=1&h=1&v=e03ceb1a31e457dbfe30e968c76fb0d6",
          "support": true,
          "id": "8565ee94cad51c4a794676cda5fbbbf36e97e755b46a19b7b08ce8011c8e86c5",
          "name": "",
          "typeLine": "Cast when Damage Taken Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Support, Spell, Trigger",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Cooldown Time",
              "values": [
                [
                  "0.25 sec",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "48",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Each supported spell skill will track damage you take, and be triggered when the total damage taken reaches a threshold. Cannot support skills used by totems, traps, or mines. Vaal skills, channelling skills, and skills that reserve mana cannot be triggered.",
          "explicitMods": [
            "This Gem can only Support Skill Gems requiring Level 70 or lower",
            "Supported Skills deal 6% more Damage",
            "You cannot Cast Supported Triggerable Spells directly",
            "Trigger Supported Spells when you take a total of 3272 Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "S"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/BoneOffering.png?scale=1&w=1&h=1&v=561ddc6f163a1756219cfde78c5253bb",
          "support": false,
          "id": "0abec0756ca6f8024d742bab798445567a80e0cb5bca08867a6b86ee455f7e14",
          "name": "",
          "typeLine": "Bone Offering",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Minion, Spell, Duration",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "32",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "1.00 sec",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "1570395/212046017",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.007405916228890419,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "151",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Consumes a corpse, granting all of your minions the power to block both attacks and spells. The skill consumes other nearby corpses, increasing the duration for each corpse consumed.",
          "explicitMods": [
            "Minions recover 528 Life when they Block",
            "Base duration is 5.00 seconds",
            "Additional 1.00 seconds Base Duration per extra corpse Consumed",
            "Grants Minions +34% Chance to Block Attack Damage",
            "Grants Minions +34% Chance to Block Spell Damage"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Desecrate.png?scale=1&w=1&h=1&v=dfc2a74680994c9d9f00b7872b07f76b",
          "support": false,
          "id": "ab184c0a6db571073308098d6131f502eaf5bdf412b295e7e25c5470da71face",
          "name": "",
          "typeLine": "Desecrate",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Spell, AoE, Duration, Chaos",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "26",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.60 sec",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "98",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Desecrates the ground, summoning corpses and dealing chaos damage to all enemies in the area. The corpses will be chosen from the monsters in the current area and any Spectres that have existed in this instance.",
          "explicitMods": [
            "Deals 294 Base Chaos Damage per second",
            "Base duration is 4.00 seconds",
            "Spawns 5 corpses",
            "Spawns corpses up to Level 100",
            "Maximum of 10 corpses allowed"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "D"
        }
      ]
    },
    {
      "verified": false,
      "w": 1,
      "h": 2,
      "icon": "https://web.poecdn.com/gen/image/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvbWFuYWZsYXNrMTBvbGQiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d/2a1a4bfd59/Item.png",
      "league": "Standard",
      "id": "d5ad241df2abcd59b4b800aae85ad48a8e39de926e33162c062d9ce93191ed44",
      "name": "",
      "typeLine": "Bubbling Divine Mana Flask of Heat",
      "identified": true,
      "ilvl": 62,
      "properties": [
        {
          "name": "Recovers %0 Mana over %1 Seconds",
          "values": [
            [
              "700",
              1
            ],
            [
              "2.10",
              1
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Consumes %0 of %1 Charges on use",
          "values": [
            [
              "8",
              0
            ],
            [
              "42",
              0
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Currently has %0 Charges",
          "values": [
            [
              "42",
              0
            ]
          ],
          "displayMode": 3
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "60",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "explicitMods": [
        "50% reduced Amount Recovered",
        "135% increased Recovery rate",
        "50% of Recovery applied Instantly",
        "Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use"
      ],
      "descrText": "Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.",
      "frameType": 1,
      "x": 3,
      "y": 0,
      "inventoryId": "Flask"
    },
    {
      "verified": false,
      "w": 1,
      "h": 2,
      "icon": "https://web.poecdn.com/gen/image/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvc2FwcGhpcmUiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d/09d83c62ad/Item.png",
      "league": "Standard",
      "id": "16d7654ef5ad1610fae9e3e2b99bfb452d7616e93655c6ed29cebfbcaac01d3b",
      "name": "",
      "typeLine": "Experimenter's Sapphire Flask of Heat",
      "identified": true,
      "ilvl": 74,
      "properties": [
        {
          "name": "Lasts %0 Seconds",
          "values": [
            [
              "5.60",
              1
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Consumes %0 of %1 Charges on use",
          "values": [
            [
              "30",
              0
            ],
            [
              "60",
              0
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Currently has %0 Charges",
          "values": [
            [
              "60",
              0
            ]
          ],
          "displayMode": 3
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "18",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "utilityMods": [
        "+50% to Cold Resistance",
        "20% less Cold Damage taken"
      ],
      "explicitMods": [
        "Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use",
        "40% increased Duration"
      ],
      "descrText": "Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.",
      "frameType": 1,
      "x": 1,
      "y": 0,
      "inventoryId": "Flask"
    },
    {
      "verified": false,
      "w": 1,
      "h": 3,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Weapons/OneHandWeapons/Daggers/Dagger7.png?scale=1&w=1&h=3&v=2524f5358d9c9f46d40c6dfe61c3f17e",
      "league": "Standard",
      "id": "a2fb467c85752eb51cc1ac752b2c846e5f6778e430fc8f015fb967c4625c7175",
      "sockets": [
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 1,
          "attr": "I",
          "sColour": "B"
        }
      ],
      "name": "",
      "typeLine": "Royal Skean",
      "identified": true,
      "ilvl": 50,
      "properties": [
        {
          "name": "Rune Dagger",
          "values": [],
          "displayMode": 0
        },
        {
          "name": "Physical Damage",
          "values": [
            [
              "16-64",
              0
            ]
          ],
          "displayMode": 0,
          "type": 9
        },
        {
          "name": "Critical Strike Chance",
          "values": [
            [
              "6.30%",
              0
            ]
          ],
          "displayMode": 0,
          "type": 12
        },
        {
          "name": "Attacks per Second",
          "values": [
            [
              "1.45",
              0
            ]
          ],
          "displayMode": 0,
          "type": 13
        },
        {
          "name": "Weapon Range",
          "values": [
            [
              "10",
              0
            ]
          ],
          "displayMode": 0,
          "type": 14
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "68",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Dex",
          "values": [
            [
              "95",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "151",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "implicitMods": [
        "30% increased Global Critical Strike Chance"
      ],
      "frameType": 0,
      "x": 0,
      "y": 0,
      "inventoryId": "Weapon2",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/BoneLance.png?scale=1&w=1&h=1&v=5a0656772623e42e635f28211e385017",
          "support": false,
          "id": "da43d7dfe0c651625cb6665a4d3ac7a2efdc837c3bcb04b1f0369e25138631c7",
          "name": "",
          "typeLine": "Unearth",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Spell, Projectile, AoE, Physical",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.60 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Critical Strike Chance",
              "values": [
                [
                  "6.00%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Effectiveness of Added Damage",
              "values": [
                [
                  "125%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "79584975/212051599",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.37530946731567383,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "95",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "66",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Fires a projectile that will pierce through enemies to impact the ground at the targeted location, creating a Bone Archer corpse where it lands.",
          "explicitMods": [
            "Deals 624 to 936 Physical Damage",
            "Projectiles Pierce all Targets",
            "Spawns corpses with Level 77",
            "Maximum of 10 corpses allowed"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/BoneLance.png?scale=1&w=1&h=1&v=5a0656772623e42e635f28211e385017",
          "support": false,
          "id": "1a2501a60d6ef0c3ae03f3211a01e579ed31e31647af23a1513bc27e87efe4bb",
          "name": "",
          "typeLine": "Unearth",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Spell, Projectile, AoE, Physical",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "0.60 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Critical Strike Chance",
              "values": [
                [
                  "6.00%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Effectiveness of Added Damage",
              "values": [
                [
                  "125%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "79574095/212051599",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.3752581775188446,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "95",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "66",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Fires a projectile that will pierce through enemies to impact the ground at the targeted location, creating a Bone Archer corpse where it lands.",
          "explicitMods": [
            "Deals 624 to 936 Physical Damage",
            "Projectiles Pierce all Targets",
            "Spawns corpses with Level 77",
            "Maximum of 10 corpses allowed"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/LightningResistAura.png?scale=1&w=1&h=1&v=ca0fd896115b64c5d21b104b5a84630b",
          "support": false,
          "id": "311f85c172efb70dc24979515ecefef4de3c689aa7344d03eda3cfccb80295d0",
          "name": "",
          "typeLine": "Purity of Lightning",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Aura, Spell, AoE, Lightning",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Reserved",
              "values": [
                [
                  "35%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cooldown Time",
              "values": [
                [
                  "1.20 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "Instant",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "79974697/211877683",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.3774569034576416,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "151",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Casts an aura that grants lightning resistance to you and your allies.",
          "explicitMods": [
            "+18 to radius",
            "You and nearby allies gain 40% additional Lightning Resistance",
            "You and nearby allies gain 3% additional maximum Lightning Resistance"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "I"
        }
      ]
    },
    {
      "verified": false,
      "w": 1,
      "h": 3,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Weapons/OneHandWeapons/OneHandMaces/OneHandMace3.png?scale=1&w=1&h=3&v=0da211513b53dc8acc1a040ee18b6347",
      "league": "Standard",
      "id": "8166e5a17b3bc52f979f4ff427d16de35b5e3661dc110c037009fa885c2eaa7c",
      "sockets": [
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "S",
          "sColour": "R"
        },
        {
          "group": 1,
          "attr": "S",
          "sColour": "R"
        }
      ],
      "name": "",
      "typeLine": "Barbed Club",
      "identified": true,
      "ilvl": 50,
      "properties": [
        {
          "name": "One Handed Mace",
          "values": [],
          "displayMode": 0
        },
        {
          "name": "Physical Damage",
          "values": [
            [
              "33-42",
              0
            ]
          ],
          "displayMode": 0,
          "type": 9
        },
        {
          "name": "Critical Strike Chance",
          "values": [
            [
              "5.00%",
              0
            ]
          ],
          "displayMode": 0,
          "type": 12
        },
        {
          "name": "Attacks per Second",
          "values": [
            [
              "1.40",
              0
            ]
          ],
          "displayMode": 0,
          "type": 13
        },
        {
          "name": "Weapon Range",
          "values": [
            [
              "11",
              0
            ]
          ],
          "displayMode": 0,
          "type": 14
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "69",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Str",
          "values": [
            [
              "125",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "151",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "implicitMods": [
        "10% reduced Enemy Stun Threshold"
      ],
      "frameType": 0,
      "x": 0,
      "y": 0,
      "inventoryId": "Offhand2",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/LightningResistAura.png?scale=1&w=1&h=1&v=ca0fd896115b64c5d21b104b5a84630b",
          "support": false,
          "id": "508155b4a51d40f06076c9975090b670043cbeff499e0e673774121a038e511b",
          "name": "",
          "typeLine": "Purity of Lightning",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Aura, Spell, AoE, Lightning",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Reserved",
              "values": [
                [
                  "35%",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cooldown Time",
              "values": [
                [
                  "1.20 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "Instant",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "79974697/211877683",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.3774569034576416,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "151",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Casts an aura that grants lightning resistance to you and your allies.",
          "explicitMods": [
            "+18 to radius",
            "You and nearby allies gain 40% additional Lightning Resistance",
            "You and nearby allies gain 3% additional maximum Lightning Resistance"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/Brutality.png?scale=1&w=1&h=1&v=e39c3abec2992338acbbeac37e31fae7",
          "support": true,
          "id": "9b9ac41d750d230561f84b9c3302e07b42887d67608a2f582dfa2bcf9a17fce3",
          "name": "",
          "typeLine": "Brutality Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Physical, Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "130%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "30334245/157405063",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.19271454215049744,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "69",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "109",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill that hits enemies.",
          "explicitMods": [
            "Supported Skills deal 58% more Physical Damage",
            "Supported Skills deal no Chaos Damage",
            "Supported Skills deal no Elemental Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "S"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/Brutality.png?scale=1&w=1&h=1&v=e39c3abec2992338acbbeac37e31fae7",
          "support": true,
          "id": "87295c2f19839a833c30f65f86850829114c1afb06b6e29b51e1edb94c638640",
          "name": "",
          "typeLine": "Brutality Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Physical, Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "19",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "130%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "additionalProperties": [
            {
              "name": "Experience",
              "values": [
                [
                  "30196160/157405063",
                  0
                ]
              ],
              "displayMode": 2,
              "progress": 0.19183729588985443,
              "type": 20
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "69",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "109",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill that hits enemies.",
          "explicitMods": [
            "Supported Skills deal 58% more Physical Damage",
            "Supported Skills deal no Chaos Damage",
            "Supported Skills deal no Elemental Damage"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "S"
        }
      ]
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Rings/TopazRuby.png?scale=1&w=1&h=1&v=0bd3c7197b952981eb21cb0dc278c04d",
      "league": "Standard",
      "id": "819fb7ce7e1cb0c399911d0a731ede1b6b06fca8f7b2a3b9fbd923067cba57c6",
      "name": "Foe Knuckle",
      "typeLine": "Two-Stone Ring",
      "identified": true,
      "ilvl": 73,
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "48",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "implicitMods": [
        "+16% to Fire and Lightning Resistances"
      ],
      "explicitMods": [
        "+12 to Strength",
        "Adds 1 to 2 Physical Damage to Attacks",
        "+39% to Fire Resistance",
        "+36% to Cold Resistance",
        "0.23% of Physical Attack Damage Leeched as Life"
      ],
      "craftedMods": [
        "+24 to maximum Life"
      ],
      "frameType": 2,
      "x": 0,
      "y": 0,
      "inventoryId": "Ring2"
    },
    {
      "verified": false,
      "w": 1,
      "h": 2,
      "icon": "https://web.poecdn.com/gen/image/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvbGlmZWZsYXNrMTBvbGQiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d/e5e7fd015a/Item.png",
      "league": "Standard",
      "id": "4571eac4685914b07edf052d4d5d3b723811b18b4f7bcc5245137cf8e959f781",
      "name": "",
      "typeLine": "Seething Divine Life Flask of Dousing",
      "identified": true,
      "ilvl": 63,
      "properties": [
        {
          "name": "Quality",
          "values": [
            [
              "+20%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Recovers %0 Life over %1 Seconds",
          "values": [
            [
              "979",
              1
            ],
            [
              "7.00",
              0
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Consumes %0 of %1 Charges on use",
          "values": [
            [
              "15",
              0
            ],
            [
              "45",
              0
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Currently has %0 Charges",
          "values": [
            [
              "45",
              0
            ]
          ],
          "displayMode": 3
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "60",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "explicitMods": [
        "66% reduced Amount Recovered",
        "Instant Recovery",
        "Immunity to Ignite during Flask effect\nRemoves Burning on use"
      ],
      "descrText": "Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.",
      "frameType": 1,
      "x": 0,
      "y": 0,
      "inventoryId": "Flask"
    },
    {
      "verified": false,
      "w": 1,
      "h": 2,
      "icon": "https://web.poecdn.com/gen/image/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvc3RvbmUiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d/a48ebdcded/Item.png",
      "league": "Standard",
      "id": "89bdba894d5de8d071acb134516e349336f29b0130ffb1ef38b4233e3e2f4748",
      "name": "",
      "typeLine": "Experimenter's Basalt Flask of Heat",
      "identified": true,
      "ilvl": 68,
      "properties": [
        {
          "name": "Quality",
          "values": [
            [
              "+12%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Lasts %0 Seconds",
          "values": [
            [
              "6.60",
              1
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Consumes %0 of %1 Charges on use",
          "values": [
            [
              "40",
              0
            ],
            [
              "60",
              0
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Currently has %0 Charges",
          "values": [
            [
              "60",
              0
            ]
          ],
          "displayMode": 3
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "40",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "utilityMods": [
        "15% additional Physical Damage Reduction",
        "20% of Melee Physical Damage taken reflected to Attacker"
      ],
      "explicitMods": [
        "Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use",
        "34% increased Duration"
      ],
      "descrText": "Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.",
      "frameType": 1,
      "x": 4,
      "y": 0,
      "inventoryId": "Flask"
    },
    {
      "verified": false,
      "w": 1,
      "h": 2,
      "icon": "https://web.poecdn.com/gen/image/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvc2lsdmVyIiwic3AiOjAuNjA4NSwibGV2ZWwiOjF9XQ/b4edcba80f/Item.png",
      "league": "Standard",
      "id": "3dd00d4c5c4f23c2ce2ec4a25f7228be382bd5ba3ef05f8756291e0696075320",
      "name": "",
      "typeLine": "Ample Silver Flask of Heat",
      "identified": true,
      "ilvl": 65,
      "properties": [
        {
          "name": "Quality",
          "values": [
            [
              "+20%",
              1
            ]
          ],
          "displayMode": 0,
          "type": 6
        },
        {
          "name": "Lasts %0 Seconds",
          "values": [
            [
              "6.00",
              1
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Consumes %0 of %1 Charges on use",
          "values": [
            [
              "40",
              0
            ],
            [
              "80",
              1
            ]
          ],
          "displayMode": 3
        },
        {
          "name": "Currently has %0 Charges",
          "values": [
            [
              "80",
              0
            ]
          ],
          "displayMode": 3
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "22",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "utilityMods": [
        "Onslaught"
      ],
      "explicitMods": [
        "+20 to Maximum Charges",
        "Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use"
      ],
      "descrText": "Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.",
      "frameType": 1,
      "x": 2,
      "y": 0,
      "inventoryId": "Flask"
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Amulets/Amulet4.png?scale=1&w=1&h=1&v=cc3ec167ca9ea10dfa05b2d55b5dcf62",
      "league": "Standard",
      "id": "7cab2680d655d6df0eac708dd6e3b318066c1705293b1c44810a58406d3c7540",
      "name": "Damnation Medallion",
      "typeLine": "Jade Amulet",
      "identified": true,
      "ilvl": 70,
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "39",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "implicitMods": [
        "+25 to Dexterity"
      ],
      "explicitMods": [
        "Adds 1 to 28 Lightning Damage to Attacks",
        "3% increased maximum Energy Shield",
        "+6% to all Elemental Resistances",
        "+35% to Lightning Resistance",
        "+3 Mana gained on Kill"
      ],
      "craftedMods": [
        "+30 to maximum Life"
      ],
      "frameType": 2,
      "x": 0,
      "y": 0,
      "inventoryId": "Amulet"
    },
    {
      "verified": false,
      "w": 2,
      "h": 2,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Armours/Boots/bootunique.png?scale=1&w=2&h=2&v=5b581c2cb7d77d063b36e08f59adea7e",
      "league": "Standard",
      "id": "a1d681d4a31e2340ef89d56da98953d1740c1fae2d45fcf2503a903ea2165c73",
      "sockets": [
        {
          "group": 0,
          "attr": "D",
          "sColour": "G"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "I",
          "sColour": "B"
        },
        {
          "group": 0,
          "attr": "S",
          "sColour": "R"
        }
      ],
      "name": "Bones of Ullr",
      "typeLine": "Silk Slippers",
      "identified": true,
      "ilvl": 33,
      "properties": [
        {
          "name": "Energy Shield",
          "values": [
            [
              "22",
              1
            ]
          ],
          "displayMode": 0,
          "type": 18
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "70",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Str",
          "values": [
            [
              "98",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Dex",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        },
        {
          "name": "Int",
          "values": [
            [
              "111",
              0
            ]
          ],
          "displayMode": 1
        }
      ],
      "explicitMods": [
        "49% increased Energy Shield",
        "+20 to maximum Life",
        "+20 to maximum Mana",
        "+1 to Level of all Raise Zombie Gems",
        "+1 to Level of all Raise Spectre Gems",
        "5% increased Movement Speed"
      ],
      "enchantMods": [
        "Adds 16 to 24 Cold Damage if you've been Hit Recently"
      ],
      "flavourText": [
        "The dead man walks where\r",
        "the living fear to tread."
      ],
      "frameType": 3,
      "x": 0,
      "y": 0,
      "inventoryId": "Boots",
      "socketedItems": [
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/GreaterMultipleProjectiles.png?scale=1&w=1&h=1&v=e1b6fb26e5937957e08ce80e113f41e2",
          "support": true,
          "id": "2f5655a2c2737c8d67930d36bf89b494f994e9755b7cb9246f4ea4371ca99631",
          "name": "",
          "typeLine": "Greater Multiple Projectiles Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Support, Projectile",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "165%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Dex",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports projectile skills.",
          "explicitMods": [
            "Supported Skills deal 26% less Projectile Damage",
            "Supported Skills fire 4 additional Projectiles"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 0,
          "colour": "D"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/ElementalFocus.png?scale=1&w=1&h=1&v=90c05eda67f11a43b95d22d7d770d115",
          "support": true,
          "id": "f19fd850af910093fffe2a71314abd6c220df2b0d047beb3ddca64fa916c1569",
          "name": "",
          "typeLine": "Elemental Focus Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "130%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports any skill that hits or burns enemies.",
          "explicitMods": [
            "Supported Skills deal 49% more Elemental Damage",
            "Supported Skills cannot inflict Elemental Ailments"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 1,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/Support/Echo.png?scale=1&w=1&h=1&v=17265fb12263fca341ddc443a242d306",
          "support": true,
          "id": "654e51d09b660cd2bb99fbe41eabf296df17712e9bf2b684d67446e91a311734",
          "name": "",
          "typeLine": "Spell Echo Support",
          "identified": true,
          "ilvl": 0,
          "properties": [
            {
              "name": "Spell, Support",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Multiplier",
              "values": [
                [
                  "140%",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Int",
              "values": [
                [
                  "111",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Supports spell skills, making them repeat when cast. Cannot support Vaal skills, totem skills, channelling skills, triggered skills, instant skills, or skills which reserve mana.",
          "explicitMods": [
            "Supported Skills deal 10% less Damage",
            "Supported Skills Repeat an additional time",
            "Supported Skills have 70% more Cast Speed"
          ],
          "descrText": "This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 2,
          "colour": "I"
        },
        {
          "verified": false,
          "w": 1,
          "h": 1,
          "icon": "https://web.poecdn.com/image/Art/2DItems/Gems/FireElementalSummon.png?scale=1&w=1&h=1&v=5a95784cc4eb6067c15e1a8bca602f87",
          "support": false,
          "id": "95c50f3eaa45bfd23dd42499cc1ff657f7875370ecb90ae510676ed76760819f",
          "name": "",
          "typeLine": "Summon Flame Golem",
          "identified": true,
          "ilvl": 0,
          "corrupted": true,
          "properties": [
            {
              "name": "Fire, Minion, Spell, Golem",
              "values": [],
              "displayMode": 0
            },
            {
              "name": "Level",
              "values": [
                [
                  "20 (Max)",
                  0
                ]
              ],
              "displayMode": 0,
              "type": 5
            },
            {
              "name": "Mana Cost",
              "values": [
                [
                  "54",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cooldown Time",
              "values": [
                [
                  "6.00 sec",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Cast Time",
              "values": [
                [
                  "1.00 sec",
                  0
                ]
              ],
              "displayMode": 0
            }
          ],
          "requirements": [
            {
              "name": "Level",
              "values": [
                [
                  "70",
                  0
                ]
              ],
              "displayMode": 0
            },
            {
              "name": "Str",
              "values": [
                [
                  "98",
                  0
                ]
              ],
              "displayMode": 1
            },
            {
              "name": "Int",
              "values": [
                [
                  "68",
                  0
                ]
              ],
              "displayMode": 1
            }
          ],
          "secDescrText": "Summons a Flame Golem that grants you increased Damage. The Flame Golem can use a fire spray, a wave of fire damage, and an explosive arcing projectile.",
          "explicitMods": [
            "Maximum 1 Summoned Golem",
            "68% increased Minion Maximum Life",
            "Golems Grant 20% increased Damage"
          ],
          "descrText": "Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.",
          "frameType": 4,
          "socket": 3,
          "colour": "S"
        }
      ]
    }
  ],
  "character": {
    "name": "SleeperSpectreBoi",
    "league": "Standard",
    "classId": 3,
    "ascendancyClass": 3,
    "class": "Necromancer",
    "level": 91,
    "experience": 2127298143
  }
}
\"")
	packr.PackJSONBytes(".", "get-items.raw.json", "\"{"items":[{"verified":false,"w":2,"h":2,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Armours\/Gloves\/GlovesStrDex3.png?scale=1&w=2&h=2&v=26a9b159a1a53e0cae79d30d6fa50cdd","league":"Standard","id":"8ec0eb5e0e8af4573ee0b1014a9d1a684c0d9d8a6b229614c9e091f3fa04c41f","influences":{"elder":true},"elder":true,"sockets":[{"group":0,"attr":"D","sColour":"G"},{"group":0,"attr":"S","sColour":"R"},{"group":0,"attr":"D","sColour":"G"},{"group":0,"attr":"D","sColour":"G"}],"name":"Bramble Fingers","typeLine":"Dragonscale Gauntlets","identified":true,"ilvl":76,"properties":[{"name":"Quality","values":[["+20%",1]],"displayMode":0,"type":6},{"name":"Armour","values":[["168",1]],"displayMode":0,"type":16},{"name":"Evasion Rating","values":[["169",1]],"displayMode":0,"type":17}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["111",0]],"displayMode":1},{"name":"Dex","values":[["111",0]],"displayMode":1},{"name":"Int","values":[["23",0]],"displayMode":1}],"explicitMods":["Socketed Gems have 16% more Attack and Cast Speed","+22 to Dexterity","+19 to Armour","+20 to Evasion Rating","+28% to Lightning Resistance"],"craftedMods":["+45 to maximum Life"],"enchantMods":["Trigger Commandment of the Grave when your Skills or Minions Kill"],"frameType":2,"x":0,"y":0,"inventoryId":"Gloves","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/FasterAttacks.png?scale=1&w=1&h=1&v=c14203f7b19650861907a30a92e3b6fe","support":true,"id":"5b2d76db8156e06a56c34199d44e00250098722ee836614701377bc76f7c2a14","name":"","typeLine":"Faster Attacks Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Attack, Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["115%",0]],"displayMode":0},{"name":"Quality","values":[["+9%",1]],"displayMode":0,"type":6}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Dex","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports attack skills.","explicitMods":["Supported Skills have 48% increased Attack Speed"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/FortifyGem.png?scale=1&w=1&h=1&v=6a69853aaf7278667bde43531541ef7d","support":true,"id":"324850593683a0f20de933db05e8160f218fcc5457274dd8555d39183c52e247","name":"","typeLine":"Fortify Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Attack, Support, Melee","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["130%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports melee attack skills that are not triggered.","explicitMods":["Supported Skills grant Fortify on Melee hit","Supported Skills have 34% increased Fortify duration","Supported Skills deal 34% more Damage with Ailments caused by Melee Hits","Supported Skills deal 34% more Melee Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"S"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/CullingStrike.png?scale=1&w=1&h=1&v=7cb756ed033b6073986fd8babfc10f43","support":true,"id":"c48abfe1cb32da0046b949350dae15920634c538494f0cc15ba2653acdab011a","name":"","typeLine":"Culling Strike Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["110%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Dex","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports any skill that hits enemies. If enemies are left below 10% of maximum life after being hit by these skills, they will be killed.","explicitMods":["Kill Enemies that have 10% Life or lower when Hit by Supported Skills","Supported Skills deal 38% increased Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/WhirlingBlades.png?scale=1&w=1&h=1&v=e45604e808bc98f512fd4818265cdd7a","support":false,"id":"3f8caab83d98bd29d977539fc88a193c5a862835f213267bcdbca0ea3bbd8cb1","name":"","typeLine":"Whirling Blades","identified":true,"ilvl":0,"properties":[{"name":"Attack, Movement, Travel, Melee","values":[],"displayMode":0},{"name":"Level","values":[["4",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["10",0]],"displayMode":0},{"name":"Effectiveness of Added Damage","values":[["103%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["111192\/111192",0]],"displayMode":2,"progress":1,"type":20}],"requirements":[{"name":"Level","values":[["21",0]],"displayMode":0},{"name":"Dex","values":[["33",0]],"displayMode":1},{"name":"Int","values":[["23",0]],"displayMode":1}],"nextLevelRequirements":[{"name":"Level","values":[["25",0]],"displayMode":0},{"name":"Dex","values":[["38",0]],"displayMode":1},{"name":"Int","values":[["26",0]],"displayMode":1}],"secDescrText":"Dive through enemies, dealing weapon damage. Only works with daggers, claws and one handed swords. Cannot be supported by Multistrike.","explicitMods":["Deals 103.2% of Base Damage","+0.6 seconds to Attack Time"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":3,"colour":"D"}]},{"verified":false,"w":2,"h":3,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Armours\/Shields\/Riseofthephoenix.png?scale=1&w=2&h=3&v=c7717c4e01b7e50687616c686503971c","league":"Standard","id":"e08ce4c306f2f9c67a86ea6f0761b14b2dddc20a701c97232ad30ea36f6144cd","sockets":[{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"S","sColour":"R"},{"group":0,"attr":"I","sColour":"B"}],"name":"Rise of the Phoenix","typeLine":"Mosaic Kite Shield","identified":true,"ilvl":69,"properties":[{"name":"Quality","values":[["+20%",1]],"displayMode":0,"type":6},{"name":"Chance to Block","values":[["24%",0]],"displayMode":0,"type":15},{"name":"Armour","values":[["322",1]],"displayMode":0,"type":16},{"name":"Energy Shield","values":[["61",1]],"displayMode":0,"type":18}],"requirements":[{"name":"Level","values":[["72",0]],"displayMode":0},{"name":"Str","values":[["111",0]],"displayMode":1},{"name":"Int","values":[["121",0]],"displayMode":1}],"implicitMods":["+8% to all Elemental Resistances"],"explicitMods":["99% increased Armour and Energy Shield","+50 to maximum Life","Regenerate 17.5 Life per second","+5% to maximum Fire Resistance","+24% to Fire Resistance","+25% to Fire Resistance while on Low Life","10% increased Movement Speed when on Low Life","Cannot be Ignited while on Low Life"],"flavourText":["My bearer shall be guarded by flame,\r","for I am the phoenix, forever radiant in glory."],"frameType":3,"x":0,"y":0,"inventoryId":"Offhand","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/FrostFury.png?scale=1&w=1&h=1&v=77aaabfbb4c1bebcd8e2147b8cec9ffd","support":false,"id":"d0f768dbfccb05e6a2fd238985669abb3772bbcc1ca43eaf295ecd1b679fb53a","name":"","typeLine":"Winter Orb","identified":true,"ilvl":0,"properties":[{"name":"Cold, Spell, Channelling, AoE, Duration, Projectile","values":[],"displayMode":0},{"name":"Level","values":[["12",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["3",0]],"displayMode":0},{"name":"Cast Time","values":[["0.25 sec",0]],"displayMode":0},{"name":"Critical Strike Chance","values":[["6.00%",0]],"displayMode":0},{"name":"Effectiveness of Added Damage","values":[["50%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["936487\/1956648",0]],"displayMode":2,"progress":0.4786180257797241,"type":20}],"requirements":[{"name":"Level","values":[["54",0]],"displayMode":0},{"name":"Int","values":[["121",0]],"displayMode":1}],"secDescrText":"Channel to conjure an orb above you, which pelts nearby enemies with projectiles that impact the ground and explode. Channelling for longer builds up stages on the skill. When you stop channelling, the stages decay over a duration.","explicitMods":["Deals 113 to 141 Cold Damage","Base duration is 1.20 seconds","Increases and Reductions to Cast Speed also apply to Projectile Frequency","Fires projectiles every 1.6 seconds","25% increased Duration per Stage","100% more Projectile Frequency while Channelling","15% increased Projectile Frequency per Stage","Maximum 10 Stages"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/IncreasedDuration.png?scale=1&w=1&h=1&v=14b3a91933f0b921d1b573358e31f768","support":true,"id":"8a88e96541356b2ff2eaf47013f08e5212623b09bcda32edd98cec0b29d70515","name":"","typeLine":"Increased Duration Support","identified":true,"ilvl":0,"properties":[{"name":"Support, Duration","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["140%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports any skill with a duration.","explicitMods":["Supported Skills have 64% increased Skill Effect Duration"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"S"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/FasterCast.png?scale=1&w=1&h=1&v=f70e30cd3755d11a81103b70957e579c","support":true,"id":"bbd9e7fb2a802b1cbbc835360d6110ae3d0b6bdce8b6a126987486ce4a7311b2","name":"","typeLine":"Faster Casting Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Support, Spell","values":[],"displayMode":0},{"name":"Level","values":[["21 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["120%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["72",0]],"displayMode":0},{"name":"Int","values":[["114",0]],"displayMode":1}],"secDescrText":"Supports non-instant spell skills.","explicitMods":["Supported Skills have 40% increased Cast Speed"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"I"}]},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Rings\/Empty-Socket.png?scale=1&w=1&h=1&v=3671f6d79d7190b43879b830e63fc078","league":"Standard","id":"d2dc63fa70eecdba73870ca674b6247a55a1748eea896de74af2318e3614135b","sockets":[{"group":0,"attr":"I","sColour":"B"}],"name":"Plague Circle","typeLine":"Unset Ring","identified":true,"ilvl":67,"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["155",0]],"displayMode":1}],"implicitMods":["Has 1 Socket"],"explicitMods":["+2 to Level of Socketed Gems","Adds 4 to 6 Physical Damage to Attacks","+52 to maximum Life","14% increased Rarity of Items found","+40% to Fire Resistance"],"craftedMods":["+24 to Strength"],"frameType":2,"x":0,"y":0,"inventoryId":"Ring","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Clarity.png?scale=1&w=1&h=1&v=f609c128e5ee053e773b391625757d6a","support":false,"id":"541db537c188575346f9d5184593f25bbf894dd300640a11867abfbca9798fd2","name":"","typeLine":"Clarity","identified":true,"ilvl":0,"properties":[{"name":"Aura, Spell, AoE","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Reserved","values":[["279",0]],"displayMode":0},{"name":"Cooldown Time","values":[["1.20 sec",0]],"displayMode":0},{"name":"Cast Time","values":[["Instant",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["155",0]],"displayMode":1}],"secDescrText":"Casts an aura that grants mana regeneration to you and your allies.","explicitMods":["+19 to radius","You and nearby Allies Regenerate 33 Mana per second"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"I"}]},{"verified":false,"w":2,"h":2,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Armours\/Helmets\/HelmetStrInt7.png?scale=1&w=2&h=2&v=bf2963e78379f6eb35bbfede3ade0164","league":"Standard","id":"d57e1cd86f2182a45f3322f8c2e9eba8bf863d603fab50b34d320bd0e9809647","sockets":[{"group":0,"attr":"D","sColour":"G"},{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"I","sColour":"B"}],"name":"Skull Visage","typeLine":"Great Crown","identified":true,"ilvl":57,"properties":[{"name":"Quality","values":[["+20%",1]],"displayMode":0,"type":6},{"name":"Armour","values":[["242",1]],"displayMode":0,"type":16},{"name":"Energy Shield","values":[["39",1]],"displayMode":0,"type":18}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["68",0]],"displayMode":1},{"name":"Dex","values":[["54",0]],"displayMode":1},{"name":"Int","values":[["111",0]],"displayMode":1}],"explicitMods":["20% increased Armour and Energy Shield","+89 to maximum Life","+33% to Cold Resistance","+10% to Lightning Resistance"],"craftedMods":["+30 to Armour"],"enchantMods":["Bone Offering grants an additional +6% Chance to Block Attack Damage"],"frameType":2,"x":0,"y":0,"inventoryId":"Helm","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/CullingStrike.png?scale=1&w=1&h=1&v=7cb756ed033b6073986fd8babfc10f43","support":true,"id":"2f5c8df56094394d1aa29ce3b1b5a98063eaae76a603124eb52ff203af5c7251","name":"","typeLine":"Culling Strike Support","identified":true,"ilvl":0,"properties":[{"name":"Support","values":[],"displayMode":0},{"name":"Level","values":[["5",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["110%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["320672\/320672",0]],"displayMode":2,"progress":1,"type":20}],"requirements":[{"name":"Level","values":[["32",0]],"displayMode":0},{"name":"Dex","values":[["54",0]],"displayMode":1}],"nextLevelRequirements":[{"name":"Level","values":[["35",0]],"displayMode":0},{"name":"Dex","values":[["58",0]],"displayMode":1}],"secDescrText":"Supports any skill that hits enemies. If enemies are left below 10% of maximum life after being hit by these skills, they will be killed.","explicitMods":["Kill Enemies that have 10% Life or lower when Hit by Supported Skills","Supported Skills deal 8% increased Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/BallLightning.png?scale=1&w=1&h=1&v=4ee98cc1e04430cfd45639ae1ad55a38","support":false,"id":"00dc10e167a7c27f7512b9521af8d6d3351dc08db88b1df6e8c73a321b78f346","name":"","typeLine":"Ball Lightning","identified":true,"ilvl":0,"properties":[{"name":"Spell, Projectile, AoE, Lightning","values":[],"displayMode":0},{"name":"Level","values":[["2",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["14",0]],"displayMode":0},{"name":"Cast Time","values":[["0.75 sec",0]],"displayMode":0},{"name":"Critical Strike Chance","values":[["5.00%",0]],"displayMode":0},{"name":"Effectiveness of Added Damage","values":[["40%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["285815\/285815",0]],"displayMode":2,"progress":1,"type":20}],"requirements":[{"name":"Level","values":[["31",0]],"displayMode":0},{"name":"Int","values":[["73",0]],"displayMode":1}],"nextLevelRequirements":[{"name":"Level","values":[["34",0]],"displayMode":0},{"name":"Int","values":[["79",0]],"displayMode":1}],"secDescrText":"Fires a slow-moving projectile that periodically damages enemies in an area around it with bolts of lightning.","explicitMods":["Deals 3 to 58 Lightning Damage"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/CurseOnHit.png?scale=1&w=1&h=1&v=3b4d00a3f5e38dc9131148d76ba81cd9","support":true,"id":"7cce1749e35085f8eaa55cc96d5253c44fd67c81ddefab5d8d9fbb4f0133c2d1","name":"","typeLine":"Curse On Hit Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Curse, Trigger, Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["111",0]],"displayMode":1}],"secDescrText":"Must support both a skill that hits enemies, and a curse skill to work. The curse will be applied when enemies are hit by the other skill. Cannot support totems, traps, or mines. Minions cannot apply curses this way.","explicitMods":["Supported Skills apply supported Curses on Hit","You cannot Cast Supported Curses","Supported Skills have 12% reduced Curse Duration"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Flammability.png?scale=1&w=1&h=1&v=6fbf7cfcddcc267b1f44fb84314dbe04","support":false,"id":"c6e8c74ab9a16942fb5fd48fd4134973166c8f5c4e06d8c10341afa1b1a27c07","name":"","typeLine":"Flammability","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Spell, AoE, Duration, Curse, Fire","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["50",0]],"displayMode":0},{"name":"Cast Time","values":[["0.50 sec",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["68",0]],"displayMode":1},{"name":"Int","values":[["98",0]],"displayMode":1}],"secDescrText":"Curses all targets in an area, making them less resistant to fire damage and giving them a chance to be ignited by fire damage.","explicitMods":["Base duration is 10.90 seconds","+10 to radius","Cursed enemies have -44% to Fire Resistance","Cursed enemies have +14% chance to be Ignited by Fire Damage"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":3,"colour":"I"}]},{"verified":false,"w":2,"h":3,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Armours\/BodyArmours\/VisMortis.png?scale=1&w=2&h=3&v=d9655cd289589716bb4560bbcc5da0e3","league":"Standard","id":"6f87f5cbc0b663aea40626c6f526145212d7599097b84c69f38e36990a4c1121","sockets":[{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"D","sColour":"G"},{"group":0,"attr":"I","sColour":"B"},{"group":1,"attr":"I","sColour":"B"}],"name":"Vis Mortis","typeLine":"Necromancer Silks","identified":true,"ilvl":75,"properties":[{"name":"Energy Shield","values":[["352",1]],"displayMode":0,"type":18}],"requirements":[{"name":"Level","values":[["72",0]],"displayMode":0},{"name":"Dex","values":[["111",0]],"displayMode":1},{"name":"Int","values":[["160",0]],"displayMode":1}],"explicitMods":["201% increased Energy Shield","+29 to maximum Mana","Minions have 20% reduced maximum Life","Minions deal 15% increased Damage","+1 to maximum number of Spectres","Minions gain Unholy Might for 10 seconds on Kill"],"flavourText":["Reap what others have sown\r","Muster them from their graves\r","Parade them for your pleasure\r","Zealots in mortis enslaved"],"frameType":3,"x":0,"y":0,"inventoryId":"BodyArmour","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/RaiseSpectre.png?scale=1&w=1&h=1&v=24789a9ecaa587b4188a0272d0aad5ab","support":false,"id":"92934e70c6736e02eadefb9f133de35681e1a3034123861d3318b1118c02344b","name":"","typeLine":"Raise Spectre","identified":true,"ilvl":0,"properties":[{"name":"Spell, Minion","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["28",0]],"displayMode":0},{"name":"Cast Time","values":[["0.85 sec",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["155",0]],"displayMode":1}],"secDescrText":"Raises a spectral version of a defeated foe as a minion to fight for you in battle.","explicitMods":["Minions have +30% to all Elemental Resistances","Maximum 2 Raised Spectres","55% more Minion Movement Speed","Minion Movement Speed is Capped","Raised Spectres are Level 80","Minions have 1109 additional Accuracy Rating"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/MinionDamage.png?scale=1&w=1&h=1&v=11a6290e7598371f80750a036c07cc38","support":true,"id":"740556630e053e7b9ea7adbce0c07d961f1b3e0c1e3b154d7ce2c6696094fd20","name":"","typeLine":"Minion Damage Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Support, Minion","values":[],"displayMode":0},{"name":"Level","values":[["21 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["130%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["72",0]],"displayMode":0},{"name":"Int","values":[["114",0]],"displayMode":1}],"secDescrText":"Supports skills which create Minions.","explicitMods":["Minions from Supported Skills deal 50% more Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/ElementalFocus.png?scale=1&w=1&h=1&v=90c05eda67f11a43b95d22d7d770d115","support":true,"id":"4754561e600c5925da5290a61f1e5e628c152c1dfb3763066bb5ffd2cf29b698","name":"","typeLine":"Elemental Focus Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["130%",0]],"displayMode":0},{"name":"Quality","values":[["+6%",1]],"displayMode":0,"type":6}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports any skill that hits or burns enemies.","explicitMods":["Supported Skills deal 49% more Elemental Damage","Supported Skills cannot inflict Elemental Ailments","Supported Skills deal 3% increased Elemental Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/GreaterMultipleProjectiles.png?scale=1&w=1&h=1&v=e1b6fb26e5937957e08ce80e113f41e2","support":true,"id":"471ab25be1c937f7f9e9ac26778bf32c9d9282998f7f9ea0cc060a6eb9e4b2f3","name":"","typeLine":"Greater Multiple Projectiles Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Support, Projectile","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["165%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Dex","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports projectile skills.","explicitMods":["Supported Skills deal 26% less Projectile Damage","Supported Skills fire 4 additional Projectiles"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":3,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/Echo.png?scale=1&w=1&h=1&v=17265fb12263fca341ddc443a242d306","support":true,"id":"7e0be9f09ff23377edca397ed217f70825c1da62474ba9360dd0fcf748058ea1","name":"","typeLine":"Spell Echo Support","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Spell, Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["140%",0]],"displayMode":0},{"name":"Quality","values":[["+5%",1]],"displayMode":0,"type":6}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports spell skills, making them repeat when cast. Cannot support Vaal skills, totem skills, channelling skills, triggered skills, instant skills, or skills which reserve mana.","explicitMods":["Supported Skills deal 10% less Damage","Supported Skills Repeat an additional time","Supported Skills have 70% more Cast Speed","Supported Skills deal 2% increased Spell Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":4,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Convocation.png?scale=1&w=1&h=1&v=2802374e60634608f3d266072f97df41","support":false,"id":"7ceb2e20145a47aa6fddcd871ec88c733e5d60d32376dcea2a91ecbcfe6c492c","name":"","typeLine":"Convocation","identified":true,"ilvl":0,"properties":[{"name":"Minion, Spell, Duration","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["13",0]],"displayMode":0},{"name":"Cooldown Time","values":[["3.00 sec",0]],"displayMode":0},{"name":"Cast Time","values":[["Instant",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["155",0]],"displayMode":1}],"secDescrText":"Recalls all minions that are following you to your location, and grants them a temporary life regeneration effect.","explicitMods":["Base duration is 2.00 seconds","Regenerate 1.65% of Life per second"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":5,"colour":"I"}]},{"verified":false,"w":2,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Belts\/BiscosLeash.png?scale=1&w=2&h=1&v=75329e5f2855d55be4593a30aaead9fd","league":"Standard","id":"a8098c90a9b30cb5348376bb2275ebedbfb4c230c0689f288707e30a437e333e","name":"Bisco's Leash","typeLine":"Heavy Belt","identified":true,"ilvl":84,"requirements":[{"name":"Level","values":[["30",0]],"displayMode":0}],"implicitMods":["+27 to Strength"],"explicitMods":["5% increased Quantity of Items found","+29% to Cold Resistance","1% increased Rarity of Items found per 15 Rampage Kills","Rampage"],"flavourText":["You were always there, by my side,\r","whether we sat or played.\r","Our friendship was a joyful ride,\r","I wish you could have stayed."],"frameType":3,"x":0,"y":0,"inventoryId":"Belt"},{"verified":false,"w":2,"h":2,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Weapons\/OneHandWeapons\/Claws\/Clawshield3.png?scale=1&w=2&h=2&v=6bcb10631c51c4aeaf11345bb6041ed1","league":"Standard","id":"4051eb6e464105f01925128f87f13cfef203fadf56c8253fc616915514a5cd08","sockets":[{"group":0,"attr":"S","sColour":"R"},{"group":0,"attr":"I","sColour":"B"},{"group":1,"attr":"D","sColour":"G"}],"name":"Advancing Fortress","typeLine":"Gut Ripper","identified":true,"ilvl":55,"properties":[{"name":"Claw","values":[],"displayMode":0},{"name":"Quality","values":[["+20%",1]],"displayMode":0,"type":6},{"name":"Physical Damage","values":[["44-117",1]],"displayMode":0,"type":9},{"name":"Critical Strike Chance","values":[["6.30%",0]],"displayMode":0,"type":12},{"name":"Attacks per Second","values":[["1.50",0]],"displayMode":0,"type":13},{"name":"Weapon Range","values":[["11",0]],"displayMode":0,"type":14}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["70",0]],"displayMode":1},{"name":"Dex","values":[["98",0]],"displayMode":1},{"name":"Int","values":[["151",0]],"displayMode":1}],"implicitMods":["+44 Life gained for each Enemy hit by Attacks"],"explicitMods":["Socketed Gems are Supported by Level 12 Fortify","15% Chance to Block Attack Damage","101% increased Physical Damage","+110 to Evasion Rating","+35 to maximum Energy Shield","+46 to maximum Life","Reflects 82 Physical Damage to Melee Attackers"],"flavourText":["\"A man cowers behind his walls.\r","A woman carries her fortress with her.\r","In heart, in mind, in hand.\"\r","- Sekhema Deshret"],"frameType":3,"x":0,"y":0,"inventoryId":"Weapon","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/CastOnDmgTaken.png?scale=1&w=1&h=1&v=e03ceb1a31e457dbfe30e968c76fb0d6","support":true,"id":"8565ee94cad51c4a794676cda5fbbbf36e97e755b46a19b7b08ce8011c8e86c5","name":"","typeLine":"Cast when Damage Taken Support","identified":true,"ilvl":0,"properties":[{"name":"Support, Spell, Trigger","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Cooldown Time","values":[["0.25 sec",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["70",0]],"displayMode":1},{"name":"Int","values":[["48",0]],"displayMode":1}],"secDescrText":"Each supported spell skill will track damage you take, and be triggered when the total damage taken reaches a threshold. Cannot support skills used by totems, traps, or mines. Vaal skills, channelling skills, and skills that reserve mana cannot be triggered.","explicitMods":["This Gem can only Support Skill Gems requiring Level 70 or lower","Supported Skills deal 6% more Damage","You cannot Cast Supported Triggerable Spells directly","Trigger Supported Spells when you take a total of 3272 Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"S"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/BoneOffering.png?scale=1&w=1&h=1&v=561ddc6f163a1756219cfde78c5253bb","support":false,"id":"0abec0756ca6f8024d742bab798445567a80e0cb5bca08867a6b86ee455f7e14","name":"","typeLine":"Bone Offering","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Minion, Spell, Duration","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["32",0]],"displayMode":0},{"name":"Cast Time","values":[["1.00 sec",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["1570395\/212046017",0]],"displayMode":2,"progress":0.007405916228890419,"type":20}],"requirements":[{"name":"Level","values":[["68",0]],"displayMode":0},{"name":"Int","values":[["151",0]],"displayMode":1}],"secDescrText":"Consumes a corpse, granting all of your minions the power to block both attacks and spells. The skill consumes other nearby corpses, increasing the duration for each corpse consumed.","explicitMods":["Minions recover 528 Life when they Block","Base duration is 5.00 seconds","Additional 1.00 seconds Base Duration per extra corpse Consumed","Grants Minions +34% Chance to Block Attack Damage","Grants Minions +34% Chance to Block Spell Damage"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Desecrate.png?scale=1&w=1&h=1&v=dfc2a74680994c9d9f00b7872b07f76b","support":false,"id":"ab184c0a6db571073308098d6131f502eaf5bdf412b295e7e25c5470da71face","name":"","typeLine":"Desecrate","identified":true,"ilvl":0,"properties":[{"name":"Spell, AoE, Duration, Chaos","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["26",0]],"displayMode":0},{"name":"Cast Time","values":[["0.60 sec",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Dex","values":[["98",0]],"displayMode":1},{"name":"Int","values":[["68",0]],"displayMode":1}],"secDescrText":"Desecrates the ground, summoning corpses and dealing chaos damage to all enemies in the area. The corpses will be chosen from the monsters in the current area and any Spectres that have existed in this instance.","explicitMods":["Deals 294 Base Chaos Damage per second","Base duration is 4.00 seconds","Spawns 5 corpses","Spawns corpses up to Level 100","Maximum of 10 corpses allowed"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"D"}]},{"verified":false,"w":1,"h":2,"icon":"https:\/\/web.poecdn.com\/gen\/image\/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvbWFuYWZsYXNrMTBvbGQiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d\/2a1a4bfd59\/Item.png","league":"Standard","id":"d5ad241df2abcd59b4b800aae85ad48a8e39de926e33162c062d9ce93191ed44","name":"","typeLine":"Bubbling Divine Mana Flask of Heat","identified":true,"ilvl":62,"properties":[{"name":"Recovers %0 Mana over %1 Seconds","values":[["700",1],["2.10",1]],"displayMode":3},{"name":"Consumes %0 of %1 Charges on use","values":[["8",0],["42",0]],"displayMode":3},{"name":"Currently has %0 Charges","values":[["42",0]],"displayMode":3}],"requirements":[{"name":"Level","values":[["60",0]],"displayMode":0}],"explicitMods":["50% reduced Amount Recovered","135% increased Recovery rate","50% of Recovery applied Instantly","Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use"],"descrText":"Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.","frameType":1,"x":3,"y":0,"inventoryId":"Flask"},{"verified":false,"w":1,"h":2,"icon":"https:\/\/web.poecdn.com\/gen\/image\/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvc2FwcGhpcmUiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d\/09d83c62ad\/Item.png","league":"Standard","id":"16d7654ef5ad1610fae9e3e2b99bfb452d7616e93655c6ed29cebfbcaac01d3b","name":"","typeLine":"Experimenter's Sapphire Flask of Heat","identified":true,"ilvl":74,"properties":[{"name":"Lasts %0 Seconds","values":[["5.60",1]],"displayMode":3},{"name":"Consumes %0 of %1 Charges on use","values":[["30",0],["60",0]],"displayMode":3},{"name":"Currently has %0 Charges","values":[["60",0]],"displayMode":3}],"requirements":[{"name":"Level","values":[["18",0]],"displayMode":0}],"utilityMods":["+50% to Cold Resistance","20% less Cold Damage taken"],"explicitMods":["Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use","40% increased Duration"],"descrText":"Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.","frameType":1,"x":1,"y":0,"inventoryId":"Flask"},{"verified":false,"w":1,"h":3,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Weapons\/OneHandWeapons\/Daggers\/Dagger7.png?scale=1&w=1&h=3&v=2524f5358d9c9f46d40c6dfe61c3f17e","league":"Standard","id":"a2fb467c85752eb51cc1ac752b2c846e5f6778e430fc8f015fb967c4625c7175","sockets":[{"group":0,"attr":"D","sColour":"G"},{"group":0,"attr":"D","sColour":"G"},{"group":1,"attr":"I","sColour":"B"}],"name":"","typeLine":"Royal Skean","identified":true,"ilvl":50,"properties":[{"name":"Rune Dagger","values":[],"displayMode":0},{"name":"Physical Damage","values":[["16-64",0]],"displayMode":0,"type":9},{"name":"Critical Strike Chance","values":[["6.30%",0]],"displayMode":0,"type":12},{"name":"Attacks per Second","values":[["1.45",0]],"displayMode":0,"type":13},{"name":"Weapon Range","values":[["10",0]],"displayMode":0,"type":14}],"requirements":[{"name":"Level","values":[["68",0]],"displayMode":0},{"name":"Dex","values":[["95",0]],"displayMode":1},{"name":"Int","values":[["151",0]],"displayMode":1}],"implicitMods":["30% increased Global Critical Strike Chance"],"frameType":0,"x":0,"y":0,"inventoryId":"Weapon2","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/BoneLance.png?scale=1&w=1&h=1&v=5a0656772623e42e635f28211e385017","support":false,"id":"da43d7dfe0c651625cb6665a4d3ac7a2efdc837c3bcb04b1f0369e25138631c7","name":"","typeLine":"Unearth","identified":true,"ilvl":0,"properties":[{"name":"Spell, Projectile, AoE, Physical","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["19",0]],"displayMode":0},{"name":"Cast Time","values":[["0.60 sec",0]],"displayMode":0},{"name":"Critical Strike Chance","values":[["6.00%",0]],"displayMode":0},{"name":"Effectiveness of Added Damage","values":[["125%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["79584975\/212051599",0]],"displayMode":2,"progress":0.37530946731567383,"type":20}],"requirements":[{"name":"Level","values":[["68",0]],"displayMode":0},{"name":"Dex","values":[["95",0]],"displayMode":1},{"name":"Int","values":[["66",0]],"displayMode":1}],"secDescrText":"Fires a projectile that will pierce through enemies to impact the ground at the targeted location, creating a Bone Archer corpse where it lands.","explicitMods":["Deals 624 to 936 Physical Damage","Projectiles Pierce all Targets","Spawns corpses with Level 77","Maximum of 10 corpses allowed"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/BoneLance.png?scale=1&w=1&h=1&v=5a0656772623e42e635f28211e385017","support":false,"id":"1a2501a60d6ef0c3ae03f3211a01e579ed31e31647af23a1513bc27e87efe4bb","name":"","typeLine":"Unearth","identified":true,"ilvl":0,"properties":[{"name":"Spell, Projectile, AoE, Physical","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["19",0]],"displayMode":0},{"name":"Cast Time","values":[["0.60 sec",0]],"displayMode":0},{"name":"Critical Strike Chance","values":[["6.00%",0]],"displayMode":0},{"name":"Effectiveness of Added Damage","values":[["125%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["79574095\/212051599",0]],"displayMode":2,"progress":0.3752581775188446,"type":20}],"requirements":[{"name":"Level","values":[["68",0]],"displayMode":0},{"name":"Dex","values":[["95",0]],"displayMode":1},{"name":"Int","values":[["66",0]],"displayMode":1}],"secDescrText":"Fires a projectile that will pierce through enemies to impact the ground at the targeted location, creating a Bone Archer corpse where it lands.","explicitMods":["Deals 624 to 936 Physical Damage","Projectiles Pierce all Targets","Spawns corpses with Level 77","Maximum of 10 corpses allowed"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/LightningResistAura.png?scale=1&w=1&h=1&v=ca0fd896115b64c5d21b104b5a84630b","support":false,"id":"311f85c172efb70dc24979515ecefef4de3c689aa7344d03eda3cfccb80295d0","name":"","typeLine":"Purity of Lightning","identified":true,"ilvl":0,"properties":[{"name":"Aura, Spell, AoE, Lightning","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Reserved","values":[["35%",0]],"displayMode":0},{"name":"Cooldown Time","values":[["1.20 sec",0]],"displayMode":0},{"name":"Cast Time","values":[["Instant",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["79974697\/211877683",0]],"displayMode":2,"progress":0.3774569034576416,"type":20}],"requirements":[{"name":"Level","values":[["68",0]],"displayMode":0},{"name":"Int","values":[["151",0]],"displayMode":1}],"secDescrText":"Casts an aura that grants lightning resistance to you and your allies.","explicitMods":["+18 to radius","You and nearby allies gain 40% additional Lightning Resistance","You and nearby allies gain 3% additional maximum Lightning Resistance"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"I"}]},{"verified":false,"w":1,"h":3,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Weapons\/OneHandWeapons\/OneHandMaces\/OneHandMace3.png?scale=1&w=1&h=3&v=0da211513b53dc8acc1a040ee18b6347","league":"Standard","id":"8166e5a17b3bc52f979f4ff427d16de35b5e3661dc110c037009fa885c2eaa7c","sockets":[{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"S","sColour":"R"},{"group":1,"attr":"S","sColour":"R"}],"name":"","typeLine":"Barbed Club","identified":true,"ilvl":50,"properties":[{"name":"One Handed Mace","values":[],"displayMode":0},{"name":"Physical Damage","values":[["33-42",0]],"displayMode":0,"type":9},{"name":"Critical Strike Chance","values":[["5.00%",0]],"displayMode":0,"type":12},{"name":"Attacks per Second","values":[["1.40",0]],"displayMode":0,"type":13},{"name":"Weapon Range","values":[["11",0]],"displayMode":0,"type":14}],"requirements":[{"name":"Level","values":[["69",0]],"displayMode":0},{"name":"Str","values":[["125",0]],"displayMode":1},{"name":"Int","values":[["151",0]],"displayMode":1}],"implicitMods":["10% reduced Enemy Stun Threshold"],"frameType":0,"x":0,"y":0,"inventoryId":"Offhand2","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/LightningResistAura.png?scale=1&w=1&h=1&v=ca0fd896115b64c5d21b104b5a84630b","support":false,"id":"508155b4a51d40f06076c9975090b670043cbeff499e0e673774121a038e511b","name":"","typeLine":"Purity of Lightning","identified":true,"ilvl":0,"properties":[{"name":"Aura, Spell, AoE, Lightning","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Reserved","values":[["35%",0]],"displayMode":0},{"name":"Cooldown Time","values":[["1.20 sec",0]],"displayMode":0},{"name":"Cast Time","values":[["Instant",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["79974697\/211877683",0]],"displayMode":2,"progress":0.3774569034576416,"type":20}],"requirements":[{"name":"Level","values":[["68",0]],"displayMode":0},{"name":"Int","values":[["151",0]],"displayMode":1}],"secDescrText":"Casts an aura that grants lightning resistance to you and your allies.","explicitMods":["+18 to radius","You and nearby allies gain 40% additional Lightning Resistance","You and nearby allies gain 3% additional maximum Lightning Resistance"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/Brutality.png?scale=1&w=1&h=1&v=e39c3abec2992338acbbeac37e31fae7","support":true,"id":"9b9ac41d750d230561f84b9c3302e07b42887d67608a2f582dfa2bcf9a17fce3","name":"","typeLine":"Brutality Support","identified":true,"ilvl":0,"properties":[{"name":"Physical, Support","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["130%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["30334245\/157405063",0]],"displayMode":2,"progress":0.19271454215049744,"type":20}],"requirements":[{"name":"Level","values":[["69",0]],"displayMode":0},{"name":"Str","values":[["109",0]],"displayMode":1}],"secDescrText":"Supports any skill that hits enemies.","explicitMods":["Supported Skills deal 58% more Physical Damage","Supported Skills deal no Chaos Damage","Supported Skills deal no Elemental Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"S"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/Brutality.png?scale=1&w=1&h=1&v=e39c3abec2992338acbbeac37e31fae7","support":true,"id":"87295c2f19839a833c30f65f86850829114c1afb06b6e29b51e1edb94c638640","name":"","typeLine":"Brutality Support","identified":true,"ilvl":0,"properties":[{"name":"Physical, Support","values":[],"displayMode":0},{"name":"Level","values":[["19",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["130%",0]],"displayMode":0}],"additionalProperties":[{"name":"Experience","values":[["30196160\/157405063",0]],"displayMode":2,"progress":0.19183729588985443,"type":20}],"requirements":[{"name":"Level","values":[["69",0]],"displayMode":0},{"name":"Str","values":[["109",0]],"displayMode":1}],"secDescrText":"Supports any skill that hits enemies.","explicitMods":["Supported Skills deal 58% more Physical Damage","Supported Skills deal no Chaos Damage","Supported Skills deal no Elemental Damage"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"S"}]},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Rings\/TopazRuby.png?scale=1&w=1&h=1&v=0bd3c7197b952981eb21cb0dc278c04d","league":"Standard","id":"819fb7ce7e1cb0c399911d0a731ede1b6b06fca8f7b2a3b9fbd923067cba57c6","name":"Foe Knuckle","typeLine":"Two-Stone Ring","identified":true,"ilvl":73,"requirements":[{"name":"Level","values":[["48",0]],"displayMode":0}],"implicitMods":["+16% to Fire and Lightning Resistances"],"explicitMods":["+12 to Strength","Adds 1 to 2 Physical Damage to Attacks","+39% to Fire Resistance","+36% to Cold Resistance","0.23% of Physical Attack Damage Leeched as Life"],"craftedMods":["+24 to maximum Life"],"frameType":2,"x":0,"y":0,"inventoryId":"Ring2"},{"verified":false,"w":1,"h":2,"icon":"https:\/\/web.poecdn.com\/gen\/image\/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvbGlmZWZsYXNrMTBvbGQiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d\/e5e7fd015a\/Item.png","league":"Standard","id":"4571eac4685914b07edf052d4d5d3b723811b18b4f7bcc5245137cf8e959f781","name":"","typeLine":"Seething Divine Life Flask of Dousing","identified":true,"ilvl":63,"properties":[{"name":"Quality","values":[["+20%",1]],"displayMode":0,"type":6},{"name":"Recovers %0 Life over %1 Seconds","values":[["979",1],["7.00",0]],"displayMode":3},{"name":"Consumes %0 of %1 Charges on use","values":[["15",0],["45",0]],"displayMode":3},{"name":"Currently has %0 Charges","values":[["45",0]],"displayMode":3}],"requirements":[{"name":"Level","values":[["60",0]],"displayMode":0}],"explicitMods":["66% reduced Amount Recovered","Instant Recovery","Immunity to Ignite during Flask effect\nRemoves Burning on use"],"descrText":"Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.","frameType":1,"x":0,"y":0,"inventoryId":"Flask"},{"verified":false,"w":1,"h":2,"icon":"https:\/\/web.poecdn.com\/gen\/image\/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvc3RvbmUiLCJzcCI6MC42MDg1LCJsZXZlbCI6MX1d\/a48ebdcded\/Item.png","league":"Standard","id":"89bdba894d5de8d071acb134516e349336f29b0130ffb1ef38b4233e3e2f4748","name":"","typeLine":"Experimenter's Basalt Flask of Heat","identified":true,"ilvl":68,"properties":[{"name":"Quality","values":[["+12%",1]],"displayMode":0,"type":6},{"name":"Lasts %0 Seconds","values":[["6.60",1]],"displayMode":3},{"name":"Consumes %0 of %1 Charges on use","values":[["40",0],["60",0]],"displayMode":3},{"name":"Currently has %0 Charges","values":[["60",0]],"displayMode":3}],"requirements":[{"name":"Level","values":[["40",0]],"displayMode":0}],"utilityMods":["15% additional Physical Damage Reduction","20% of Melee Physical Damage taken reflected to Attacker"],"explicitMods":["Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use","34% increased Duration"],"descrText":"Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.","frameType":1,"x":4,"y":0,"inventoryId":"Flask"},{"verified":false,"w":1,"h":2,"icon":"https:\/\/web.poecdn.com\/gen\/image\/WzksNCx7ImYiOiJBcnRcLzJESXRlbXNcL0ZsYXNrc1wvc2lsdmVyIiwic3AiOjAuNjA4NSwibGV2ZWwiOjF9XQ\/b4edcba80f\/Item.png","league":"Standard","id":"3dd00d4c5c4f23c2ce2ec4a25f7228be382bd5ba3ef05f8756291e0696075320","name":"","typeLine":"Ample Silver Flask of Heat","identified":true,"ilvl":65,"properties":[{"name":"Quality","values":[["+20%",1]],"displayMode":0,"type":6},{"name":"Lasts %0 Seconds","values":[["6.00",1]],"displayMode":3},{"name":"Consumes %0 of %1 Charges on use","values":[["40",0],["80",1]],"displayMode":3},{"name":"Currently has %0 Charges","values":[["80",0]],"displayMode":3}],"requirements":[{"name":"Level","values":[["22",0]],"displayMode":0}],"utilityMods":["Onslaught"],"explicitMods":["+20 to Maximum Charges","Immunity to Freeze and Chill during Flask effect\nRemoves Freeze and Chill on use"],"descrText":"Right click to drink. Can only hold charges while in belt. Refills as you kill monsters.","frameType":1,"x":2,"y":0,"inventoryId":"Flask"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Amulets\/Amulet4.png?scale=1&w=1&h=1&v=cc3ec167ca9ea10dfa05b2d55b5dcf62","league":"Standard","id":"7cab2680d655d6df0eac708dd6e3b318066c1705293b1c44810a58406d3c7540","name":"Damnation Medallion","typeLine":"Jade Amulet","identified":true,"ilvl":70,"requirements":[{"name":"Level","values":[["39",0]],"displayMode":0}],"implicitMods":["+25 to Dexterity"],"explicitMods":["Adds 1 to 28 Lightning Damage to Attacks","3% increased maximum Energy Shield","+6% to all Elemental Resistances","+35% to Lightning Resistance","+3 Mana gained on Kill"],"craftedMods":["+30 to maximum Life"],"frameType":2,"x":0,"y":0,"inventoryId":"Amulet"},{"verified":false,"w":2,"h":2,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Armours\/Boots\/bootunique.png?scale=1&w=2&h=2&v=5b581c2cb7d77d063b36e08f59adea7e","league":"Standard","id":"a1d681d4a31e2340ef89d56da98953d1740c1fae2d45fcf2503a903ea2165c73","sockets":[{"group":0,"attr":"D","sColour":"G"},{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"I","sColour":"B"},{"group":0,"attr":"S","sColour":"R"}],"name":"Bones of Ullr","typeLine":"Silk Slippers","identified":true,"ilvl":33,"properties":[{"name":"Energy Shield","values":[["22",1]],"displayMode":0,"type":18}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["98",0]],"displayMode":1},{"name":"Dex","values":[["111",0]],"displayMode":1},{"name":"Int","values":[["111",0]],"displayMode":1}],"explicitMods":["49% increased Energy Shield","+20 to maximum Life","+20 to maximum Mana","+1 to Level of all Raise Zombie Gems","+1 to Level of all Raise Spectre Gems","5% increased Movement Speed"],"enchantMods":["Adds 16 to 24 Cold Damage if you've been Hit Recently"],"flavourText":["The dead man walks where\r","the living fear to tread."],"frameType":3,"x":0,"y":0,"inventoryId":"Boots","socketedItems":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/GreaterMultipleProjectiles.png?scale=1&w=1&h=1&v=e1b6fb26e5937957e08ce80e113f41e2","support":true,"id":"2f5655a2c2737c8d67930d36bf89b494f994e9755b7cb9246f4ea4371ca99631","name":"","typeLine":"Greater Multiple Projectiles Support","identified":true,"ilvl":0,"properties":[{"name":"Support, Projectile","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["165%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Dex","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports projectile skills.","explicitMods":["Supported Skills deal 26% less Projectile Damage","Supported Skills fire 4 additional Projectiles"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":0,"colour":"D"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/ElementalFocus.png?scale=1&w=1&h=1&v=90c05eda67f11a43b95d22d7d770d115","support":true,"id":"f19fd850af910093fffe2a71314abd6c220df2b0d047beb3ddca64fa916c1569","name":"","typeLine":"Elemental Focus Support","identified":true,"ilvl":0,"properties":[{"name":"Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["130%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports any skill that hits or burns enemies.","explicitMods":["Supported Skills deal 49% more Elemental Damage","Supported Skills cannot inflict Elemental Ailments"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":1,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/Support\/Echo.png?scale=1&w=1&h=1&v=17265fb12263fca341ddc443a242d306","support":true,"id":"654e51d09b660cd2bb99fbe41eabf296df17712e9bf2b684d67446e91a311734","name":"","typeLine":"Spell Echo Support","identified":true,"ilvl":0,"properties":[{"name":"Spell, Support","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Multiplier","values":[["140%",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Int","values":[["111",0]],"displayMode":1}],"secDescrText":"Supports spell skills, making them repeat when cast. Cannot support Vaal skills, totem skills, channelling skills, triggered skills, instant skills, or skills which reserve mana.","explicitMods":["Supported Skills deal 10% less Damage","Supported Skills Repeat an additional time","Supported Skills have 70% more Cast Speed"],"descrText":"This is a Support Gem. It does not grant a bonus to your character, but to skills in sockets connected to it. Place into an item socket connected to a socket containing the Active Skill Gem you wish to augment. Right click to remove from a socket.","frameType":4,"socket":2,"colour":"I"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Gems\/FireElementalSummon.png?scale=1&w=1&h=1&v=5a95784cc4eb6067c15e1a8bca602f87","support":false,"id":"95c50f3eaa45bfd23dd42499cc1ff657f7875370ecb90ae510676ed76760819f","name":"","typeLine":"Summon Flame Golem","identified":true,"ilvl":0,"corrupted":true,"properties":[{"name":"Fire, Minion, Spell, Golem","values":[],"displayMode":0},{"name":"Level","values":[["20 (Max)",0]],"displayMode":0,"type":5},{"name":"Mana Cost","values":[["54",0]],"displayMode":0},{"name":"Cooldown Time","values":[["6.00 sec",0]],"displayMode":0},{"name":"Cast Time","values":[["1.00 sec",0]],"displayMode":0}],"requirements":[{"name":"Level","values":[["70",0]],"displayMode":0},{"name":"Str","values":[["98",0]],"displayMode":1},{"name":"Int","values":[["68",0]],"displayMode":1}],"secDescrText":"Summons a Flame Golem that grants you increased Damage. The Flame Golem can use a fire spray, a wave of fire damage, and an explosive arcing projectile.","explicitMods":["Maximum 1 Summoned Golem","68% increased Minion Maximum Life","Golems Grant 20% increased Damage"],"descrText":"Place into an item socket of the right colour to gain this skill. Right click to remove from a socket.","frameType":4,"socket":3,"colour":"S"}]}],"character":{"name":"SleeperSpectreBoi","league":"Standard","classId":3,"ascendancyClass":3,"class":"Necromancer","level":91,"experience":2127298143}}\"")
	packr.PackJSONBytes(".", "get-ladder.json", "\"{
  "total": 1058,
  "cached_since": "2019-08-31T21:00:08+00:00",
  "entries": [
    {
      "rank": 1,
      "dead": false,
      "online": true,
      "character": {
        "name": "TheToxicHobo",
        "level": 97,
        "class": "Trickster",
        "id": "4774125730373e8456835e9cb8ee36354ef39da0b9383d633cc6735db79bbb19",
        "experience": 3365904249,
        "depth": {
          "default": 326,
          "solo": 326
        }
      },
      "account": {
        "name": "Zano90",
        "realm": "pc",
        "challenges": {
          "total": 36
        },
        "twitch": {
          "name": "zanello90"
        }
      }
    },
    {
      "rank": 2,
      "dead": false,
      "retired": true,
      "online": true,
      "character": {
        "name": "Mumbly_Hobo",
        "level": 95,
        "class": "Guardian",
        "id": "7607270b089d9e3223698fb30e1e6078d9fa9539bb317c407ff94d6b1848c679",
        "experience": 2925429970,
        "depth": {
          "default": 249,
          "solo": 249
        }
      },
      "account": {
        "name": "Mumbly_Joe",
        "realm": "pc",
        "challenges": {
          "total": 28
        }
      }
    },
    {
      "rank": 3,
      "dead": false,
      "online": false,
      "character": {
        "name": "ShinnyHobo",
        "level": 95,
        "class": "Berserker",
        "id": "262551b93bd7eb2af68a97132cad51498556f43a3bcc813c0ae0da1d6050e654",
        "experience": 2924024826,
        "depth": {
          "default": 225,
          "solo": 225
        }
      },
      "account": {
        "name": "goup",
        "realm": "pc",
        "challenges": {
          "total": 33
        },
        "twitch": {
          "name": "kouign_amann"
        }
      }
    },
    {
      "rank": 4,
      "dead": false,
      "online": false,
      "character": {
        "name": "SlippyHobo",
        "level": 95,
        "class": "Trickster",
        "id": "509dbdb3aec359cf3298084875bcee7b6355e1b72a9c1e23317997ecc5ca0cce",
        "experience": 2905435513,
        "depth": {
          "default": 363,
          "solo": 363
        }
      },
      "account": {
        "name": "MittyJustSayin",
        "realm": "pc",
        "challenges": {
          "total": 9
        },
        "twitch": {
          "name": "mhesterthecolester"
        }
      }
    },
    {
      "rank": 5,
      "dead": false,
      "online": false,
      "character": {
        "name": "VoodooJamesNoHobo",
        "level": 95,
        "class": "Berserker",
        "id": "4999865fc201067e9e5631d9b0a604baad88d260704e4815df9c773756dbeabf",
        "experience": 2901016412,
        "depth": {
          "default": 316,
          "solo": 316
        }
      },
      "account": {
        "name": "Voodoojess",
        "realm": "pc",
        "challenges": {
          "total": 36
        },
        "twitch": {
          "name": "voodoojesus"
        }
      }
    },
    {
      "rank": 6,
      "dead": false,
      "online": true,
      "character": {
        "name": "ZzatOnlyUniquesMonka",
        "level": 95,
        "class": "Slayer",
        "id": "40842a8be3c37465d353df5bd68c68747091d4e6b8fade4f394e70e6a4eb5be0",
        "experience": 2877707556,
        "depth": {
          "default": 160,
          "solo": 160
        }
      },
      "account": {
        "name": "zzat1",
        "realm": "pc",
        "challenges": {
          "total": 28
        },
        "twitch": {
          "name": "zzat1"
        }
      }
    },
    {
      "rank": 7,
      "dead": false,
      "online": false,
      "character": {
        "name": "JhiraHobo",
        "level": 94,
        "class": "Champion",
        "id": "b4a098eef8d357882e0329575d022c40d036f5d1c38813f2220b102d47483813",
        "experience": 2763876497,
        "depth": {
          "default": 212,
          "solo": 212
        }
      },
      "account": {
        "name": "BadJhira",
        "realm": "pc",
        "challenges": {
          "total": 26
        },
        "twitch": {
          "name": "schizofrantic"
        }
      }
    },
    {
      "rank": 8,
      "dead": false,
      "online": false,
      "character": {
        "name": "Potato_Hobo",
        "level": 94,
        "class": "Chieftain",
        "id": "70dc4f53baac9da15d6ad84149e2fa818a221cb0b652b3a1e92f5e14d48ae23e",
        "experience": 2729963354,
        "depth": {
          "default": 289,
          "solo": 289
        }
      },
      "account": {
        "name": "Pimmalage",
        "realm": "pc",
        "challenges": {
          "total": 38
        },
        "twitch": {
          "name": "pimmalage"
        }
      }
    },
    {
      "rank": 9,
      "dead": false,
      "retired": true,
      "online": false,
      "character": {
        "name": "BIGBOICUKA",
        "level": 94,
        "class": "Slayer",
        "id": "55980b0c96cd466b09a13ae4e3a80888875a304f7904af868e2d95077ada7441",
        "experience": 2674691369,
        "depth": {
          "default": 152,
          "solo": 152
        }
      },
      "account": {
        "name": "Heegas7",
        "realm": "pc",
        "challenges": {
          "total": 14
        }
      }
    },
    {
      "rank": 10,
      "dead": false,
      "online": false,
      "character": {
        "name": "HeraldoHobo",
        "level": 94,
        "class": "Juggernaut",
        "id": "5f6daac5796b153d1fde713974a37fa0b385c23f7f84d6d05f2f441bbdcf0cf8",
        "experience": 2667939108,
        "depth": {
          "default": 237,
          "solo": 237
        }
      },
      "account": {
        "name": "EDE1",
        "realm": "pc",
        "challenges": {
          "total": 11
        }
      }
    },
    {
      "rank": 11,
      "dead": false,
      "online": true,
      "character": {
        "name": "Kootchie_Hobo",
        "level": 93,
        "class": "Saboteur",
        "id": "fd82a40737eb86f3beee89d540845ec1507f006f9e57de51d3372cbcae2d1cef",
        "experience": 2523029256,
        "depth": {
          "default": 181,
          "solo": 181
        }
      },
      "account": {
        "name": "The_Sin",
        "realm": "pc",
        "challenges": {
          "total": 12
        },
        "twitch": {
          "name": "the_s1n"
        }
      }
    },
    {
      "rank": 12,
      "dead": false,
      "retired": true,
      "online": true,
      "character": {
        "name": "Knoop_Slippy",
        "level": 93,
        "class": "Champion",
        "id": "942fb84d8fbd47e6cd07953689f1cdf3705844ebb9b885a511a5674174304831",
        "experience": 2508375315,
        "depth": {
          "default": 275,
          "solo": 275
        }
      },
      "account": {
        "name": "trickzpt",
        "realm": "pc",
        "challenges": {
          "total": 19
        },
        "twitch": {
          "name": "highlowpt"
        }
      }
    },
    {
      "rank": 13,
      "dead": false,
      "online": false,
      "character": {
        "name": "HoboRoboXxX",
        "level": 93,
        "class": "Inquisitor",
        "id": "1026a691f40d3f28044652f9d15bda0813585fad1d86e7617d5d59ad7701e21d",
        "experience": 2473329564,
        "depth": {
          "default": 272,
          "solo": 272
        }
      },
      "account": {
        "name": "dmiric",
        "realm": "pc",
        "challenges": {
          "total": 3
        }
      }
    },
    {
      "rank": 14,
      "dead": false,
      "online": false,
      "character": {
        "name": "HoboRoboX",
        "level": 93,
        "class": "Champion",
        "id": "119b6bdb4cc26eb005676a6e235c26d26d0c77457e88e80ef1790e74504ac797",
        "experience": 2459492232,
        "depth": {
          "default": 328,
          "solo": 328
        }
      },
      "account": {
        "name": "dmiric",
        "realm": "pc",
        "challenges": {
          "total": 3
        }
      }
    },
    {
      "rank": 15,
      "dead": false,
      "online": false,
      "character": {
        "name": "OdTheHobo",
        "level": 92,
        "class": "Juggernaut",
        "id": "50af052ce393c25aa0c87633bbfb311a9ff5efd5fbdb13463bf0ca3daa859b43",
        "experience": 2422356335,
        "depth": {
          "default": 151,
          "solo": 151
        }
      },
      "account": {
        "name": "BigOnionRings",
        "realm": "pc",
        "challenges": {
          "total": 37
        },
        "twitch": {
          "name": "godofwarpkz1"
        }
      }
    },
    {
      "rank": 16,
      "dead": false,
      "online": true,
      "character": {
        "name": "HypnoHobo",
        "level": 92,
        "class": "Slayer",
        "id": "11c5d31b214f219ac0f2cc0da9aa86e3c8f7989e8962b3cbf664281ee1a2aeee",
        "experience": 2342029884,
        "depth": {
          "default": 202,
          "solo": 202
        }
      },
      "account": {
        "name": "Skabbtomte",
        "realm": "pc",
        "challenges": {
          "total": 36
        },
        "twitch": {
          "name": "hypnox47"
        }
      }
    },
    {
      "rank": 17,
      "dead": false,
      "online": false,
      "character": {
        "name": "FesterBestertester",
        "level": 92,
        "class": "Chieftain",
        "id": "f1c223bc0ffc7a3aaf67fc7644f9b273c81f87b3472bdcc1eecfc53ee704f22a",
        "experience": 2318353957,
        "depth": {
          "default": 119,
          "solo": 119
        }
      },
      "account": {
        "name": "termite64",
        "realm": "pc",
        "challenges": {
          "total": 15
        },
        "twitch": {
          "name": "termite64"
        }
      }
    },
    {
      "rank": 18,
      "dead": false,
      "online": false,
      "character": {
        "name": "MewzUniqueManiac",
        "level": 92,
        "class": "Slayer",
        "id": "ecb2ca3ee7d285b57f808d4035a1c21ed1792c548f911941ce7d1bff9be3534a",
        "experience": 2307383033,
        "depth": {
          "default": 238,
          "solo": 238
        }
      },
      "account": {
        "name": "xMewzor",
        "realm": "pc",
        "challenges": {
          "total": 37
        },
        "twitch": {
          "name": "muusika"
        }
      }
    },
    {
      "rank": 19,
      "dead": false,
      "online": false,
      "character": {
        "name": "Bikini_Sports_PonchinII",
        "level": 92,
        "class": "Necromancer",
        "id": "c1b72b26fdd2f8bcb8a10d5c14a9eff2ddf3a0645106406703943c2199dde8c5",
        "experience": 2292138503,
        "depth": {
          "default": 144,
          "solo": 144
        }
      },
      "account": {
        "name": "nemesis201",
        "realm": "pc",
        "challenges": {
          "total": 20
        },
        "twitch": {
          "name": "nemesis201"
        }
      }
    },
    {
      "rank": 20,
      "dead": false,
      "online": true,
      "character": {
        "name": "Hoboccultist",
        "level": 92,
        "class": "Occultist",
        "id": "99579c2307f48ff542905be9c606d05385d0fc58877ba8b71e0ac49519426694",
        "experience": 2280434564,
        "depth": {
          "default": 261,
          "solo": 261
        }
      },
      "account": {
        "name": "Polymere",
        "realm": "pc",
        "challenges": {
          "total": 22
        },
        "twitch": {
          "name": "amolt"
        }
      }
    }
  ]
}
\"")
	packr.PackJSONBytes(".", "get-ladder.raw.json", "\"{"total":1058,"cached_since":"2019-08-31T21:00:08+00:00","entries":[{"rank":1,"dead":false,"online":true,"character":{"name":"TheToxicHobo","level":97,"class":"Trickster","id":"4774125730373e8456835e9cb8ee36354ef39da0b9383d633cc6735db79bbb19","experience":3365904249,"depth":{"default":326,"solo":326}},"account":{"name":"Zano90","realm":"pc","challenges":{"total":36},"twitch":{"name":"zanello90"}}},{"rank":2,"dead":false,"retired":true,"online":true,"character":{"name":"Mumbly_Hobo","level":95,"class":"Guardian","id":"7607270b089d9e3223698fb30e1e6078d9fa9539bb317c407ff94d6b1848c679","experience":2925429970,"depth":{"default":249,"solo":249}},"account":{"name":"Mumbly_Joe","realm":"pc","challenges":{"total":28}}},{"rank":3,"dead":false,"online":false,"character":{"name":"ShinnyHobo","level":95,"class":"Berserker","id":"262551b93bd7eb2af68a97132cad51498556f43a3bcc813c0ae0da1d6050e654","experience":2924024826,"depth":{"default":225,"solo":225}},"account":{"name":"goup","realm":"pc","challenges":{"total":33},"twitch":{"name":"kouign_amann"}}},{"rank":4,"dead":false,"online":false,"character":{"name":"SlippyHobo","level":95,"class":"Trickster","id":"509dbdb3aec359cf3298084875bcee7b6355e1b72a9c1e23317997ecc5ca0cce","experience":2905435513,"depth":{"default":363,"solo":363}},"account":{"name":"MittyJustSayin","realm":"pc","challenges":{"total":9},"twitch":{"name":"mhesterthecolester"}}},{"rank":5,"dead":false,"online":false,"character":{"name":"VoodooJamesNoHobo","level":95,"class":"Berserker","id":"4999865fc201067e9e5631d9b0a604baad88d260704e4815df9c773756dbeabf","experience":2901016412,"depth":{"default":316,"solo":316}},"account":{"name":"Voodoojess","realm":"pc","challenges":{"total":36},"twitch":{"name":"voodoojesus"}}},{"rank":6,"dead":false,"online":true,"character":{"name":"ZzatOnlyUniquesMonka","level":95,"class":"Slayer","id":"40842a8be3c37465d353df5bd68c68747091d4e6b8fade4f394e70e6a4eb5be0","experience":2877707556,"depth":{"default":160,"solo":160}},"account":{"name":"zzat1","realm":"pc","challenges":{"total":28},"twitch":{"name":"zzat1"}}},{"rank":7,"dead":false,"online":false,"character":{"name":"JhiraHobo","level":94,"class":"Champion","id":"b4a098eef8d357882e0329575d022c40d036f5d1c38813f2220b102d47483813","experience":2763876497,"depth":{"default":212,"solo":212}},"account":{"name":"BadJhira","realm":"pc","challenges":{"total":26},"twitch":{"name":"schizofrantic"}}},{"rank":8,"dead":false,"online":false,"character":{"name":"Potato_Hobo","level":94,"class":"Chieftain","id":"70dc4f53baac9da15d6ad84149e2fa818a221cb0b652b3a1e92f5e14d48ae23e","experience":2729963354,"depth":{"default":289,"solo":289}},"account":{"name":"Pimmalage","realm":"pc","challenges":{"total":38},"twitch":{"name":"pimmalage"}}},{"rank":9,"dead":false,"retired":true,"online":false,"character":{"name":"BIGBOICUKA","level":94,"class":"Slayer","id":"55980b0c96cd466b09a13ae4e3a80888875a304f7904af868e2d95077ada7441","experience":2674691369,"depth":{"default":152,"solo":152}},"account":{"name":"Heegas7","realm":"pc","challenges":{"total":14}}},{"rank":10,"dead":false,"online":false,"character":{"name":"HeraldoHobo","level":94,"class":"Juggernaut","id":"5f6daac5796b153d1fde713974a37fa0b385c23f7f84d6d05f2f441bbdcf0cf8","experience":2667939108,"depth":{"default":237,"solo":237}},"account":{"name":"EDE1","realm":"pc","challenges":{"total":11}}},{"rank":11,"dead":false,"online":true,"character":{"name":"Kootchie_Hobo","level":93,"class":"Saboteur","id":"fd82a40737eb86f3beee89d540845ec1507f006f9e57de51d3372cbcae2d1cef","experience":2523029256,"depth":{"default":181,"solo":181}},"account":{"name":"The_Sin","realm":"pc","challenges":{"total":12},"twitch":{"name":"the_s1n"}}},{"rank":12,"dead":false,"retired":true,"online":true,"character":{"name":"Knoop_Slippy","level":93,"class":"Champion","id":"942fb84d8fbd47e6cd07953689f1cdf3705844ebb9b885a511a5674174304831","experience":2508375315,"depth":{"default":275,"solo":275}},"account":{"name":"trickzpt","realm":"pc","challenges":{"total":19},"twitch":{"name":"highlowpt"}}},{"rank":13,"dead":false,"online":false,"character":{"name":"HoboRoboXxX","level":93,"class":"Inquisitor","id":"1026a691f40d3f28044652f9d15bda0813585fad1d86e7617d5d59ad7701e21d","experience":2473329564,"depth":{"default":272,"solo":272}},"account":{"name":"dmiric","realm":"pc","challenges":{"total":3}}},{"rank":14,"dead":false,"online":false,"character":{"name":"HoboRoboX","level":93,"class":"Champion","id":"119b6bdb4cc26eb005676a6e235c26d26d0c77457e88e80ef1790e74504ac797","experience":2459492232,"depth":{"default":328,"solo":328}},"account":{"name":"dmiric","realm":"pc","challenges":{"total":3}}},{"rank":15,"dead":false,"online":false,"character":{"name":"OdTheHobo","level":92,"class":"Juggernaut","id":"50af052ce393c25aa0c87633bbfb311a9ff5efd5fbdb13463bf0ca3daa859b43","experience":2422356335,"depth":{"default":151,"solo":151}},"account":{"name":"BigOnionRings","realm":"pc","challenges":{"total":37},"twitch":{"name":"godofwarpkz1"}}},{"rank":16,"dead":false,"online":true,"character":{"name":"HypnoHobo","level":92,"class":"Slayer","id":"11c5d31b214f219ac0f2cc0da9aa86e3c8f7989e8962b3cbf664281ee1a2aeee","experience":2342029884,"depth":{"default":202,"solo":202}},"account":{"name":"Skabbtomte","realm":"pc","challenges":{"total":36},"twitch":{"name":"hypnox47"}}},{"rank":17,"dead":false,"online":false,"character":{"name":"FesterBestertester","level":92,"class":"Chieftain","id":"f1c223bc0ffc7a3aaf67fc7644f9b273c81f87b3472bdcc1eecfc53ee704f22a","experience":2318353957,"depth":{"default":119,"solo":119}},"account":{"name":"termite64","realm":"pc","challenges":{"total":15},"twitch":{"name":"termite64"}}},{"rank":18,"dead":false,"online":false,"character":{"name":"MewzUniqueManiac","level":92,"class":"Slayer","id":"ecb2ca3ee7d285b57f808d4035a1c21ed1792c548f911941ce7d1bff9be3534a","experience":2307383033,"depth":{"default":238,"solo":238}},"account":{"name":"xMewzor","realm":"pc","challenges":{"total":37},"twitch":{"name":"muusika"}}},{"rank":19,"dead":false,"online":false,"character":{"name":"Bikini_Sports_PonchinII","level":92,"class":"Necromancer","id":"c1b72b26fdd2f8bcb8a10d5c14a9eff2ddf3a0645106406703943c2199dde8c5","experience":2292138503,"depth":{"default":144,"solo":144}},"account":{"name":"nemesis201","realm":"pc","challenges":{"total":20},"twitch":{"name":"nemesis201"}}},{"rank":20,"dead":false,"online":true,"character":{"name":"Hoboccultist","level":92,"class":"Occultist","id":"99579c2307f48ff542905be9c606d05385d0fc58877ba8b71e0ac49519426694","experience":2280434564,"depth":{"default":261,"solo":261}},"account":{"name":"Polymere","realm":"pc","challenges":{"total":22},"twitch":{"name":"amolt"}}}]}\"")
	packr.PackJSONBytes(".", "get-passive-skills.json", "\"{
  "hashes": [
    238,
    1031,
    1203,
    2292,
    4397,
    5152,
    5415,
    6204,
    6230,
    6712,
    7388,
    8930,
    10031,
    10490,
    10829,
    11420,
    11497,
    13009,
    13714,
    14936,
    15073,
    15405,
    15868,
    16167,
    16775,
    17546,
    17735,
    17821,
    18402,
    19144,
    19635,
    19939,
    20551,
    21330,
    21634,
    21958,
    22627,
    23027,
    24362,
    24383,
    26523,
    26866,
    27203,
    27611,
    27929,
    28330,
    29353,
    31683,
    31758,
    31875,
    32245,
    33479,
    33631,
    33740,
    33755,
    34098,
    34483,
    35503,
    36017,
    36047,
    36542,
    36634,
    36881,
    36949,
    37569,
    39085,
    39648,
    39818,
    41472,
    41967,
    42041,
    42583,
    42760,
    42837,
    44184,
    44202,
    44606,
    46578,
    46910,
    47251,
    48362,
    48423,
    48719,
    49254,
    50422,
    50862,
    53279,
    54159,
    55485,
    55646,
    57264,
    58449,
    60388,
    60398,
    60547,
    60554,
    61198,
    61419,
    61471,
    62021,
    63048,
    63447,
    63976,
    65034,
    65167
  ],
  "items": [
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Jewels/GhastlyEye.png?scale=1&w=1&h=1&v=118803f4aa870b0d556958d6a0634cee",
      "league": "Standard",
      "id": "345218fb4a10015b752540f9d54c8773805434c01d80638cc4189bf37659f3f6",
      "abyssJewel": true,
      "name": "Foul Oculus",
      "typeLine": "Ghastly Eye Jewel",
      "identified": true,
      "ilvl": 69,
      "properties": [
        {
          "name": "Abyss",
          "values": [],
          "displayMode": 0
        }
      ],
      "requirements": [
        {
          "name": "Level",
          "values": [
            [
              "25",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "explicitMods": [
        "+27 to maximum Life",
        "+25 to maximum Mana",
        "2% additional Physical Damage Reduction if you weren't Damaged by a Hit Recently",
        "Minions have 4% chance to Blind on Hit with Attacks"
      ],
      "descrText": "Place into an Abyssal Socket on an Item or into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.",
      "frameType": 2,
      "x": 10,
      "y": 0,
      "inventoryId": "PassiveJewels",
      "type": "JewelAbyssSummoner"
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Jewels/GolemInfernal.png?scale=1&w=1&h=1&v=898d3dbe66b3ad7915cba729df90a410",
      "league": "Standard",
      "id": "59266b08d59251f52da2ef6d81be10f31b14e76ea1586c92d5fd25621c6d2a61",
      "name": "Primordial Might",
      "typeLine": "Crimson Jewel",
      "identified": true,
      "ilvl": 73,
      "explicitMods": [
        "30% increased Damage if you Summoned a Golem in the past 8 seconds",
        "Golems Summoned in the past 8 seconds deal 39% increased Damage",
        "Golems have 20% increased Maximum Life",
        "Primordial",
        "Summoned Golems are Aggressive"
      ],
      "descrText": "Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.",
      "flavourText": [
        "\"Do not cause the land to stir,\r",
        "It holds secrets better unknown.\"\r",
        "- Azmerian proverb"
      ],
      "frameType": 3,
      "x": 14,
      "y": 0,
      "inventoryId": "PassiveJewels",
      "type": "JewelStr"
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Jewels/SpectreJewel.png?scale=1&w=1&h=1&v=26b9ea7cfa94fd614007b5124ec4423d",
      "league": "Standard",
      "id": "bb2b05d9bbb427bb05cdeeee5dcf8921d0ce49bd5919741d78aa421aec67f0c5",
      "name": "Unending Hunger",
      "typeLine": "Cobalt Jewel",
      "identified": true,
      "ilvl": 69,
      "properties": [
        {
          "name": "Limited to",
          "values": [
            [
              "2",
              0
            ]
          ],
          "displayMode": 0
        },
        {
          "name": "Radius",
          "values": [
            [
              "Medium",
              0
            ]
          ],
          "displayMode": 0,
          "type": 25
        }
      ],
      "explicitMods": [
        "Minions have 7% increased Area of Effect",
        "With at least 40 Intelligence in Radius, Raised Spectres have a 50% chance to gain Soul Eater for 20 seconds on Kill"
      ],
      "descrText": "Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.",
      "flavourText": [
        "They roamed, they fed, they grew,\r",
        "Killing as they went,\r",
        "Conquer though they may,\r",
        "Their hearts will never be content."
      ],
      "frameType": 3,
      "x": 1,
      "y": 0,
      "inventoryId": "PassiveJewels",
      "type": "JewelInt"
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Jewels/GolemTempest.png?scale=1&w=1&h=1&v=42e2467180d63e0479f562543baa47e2",
      "league": "Standard",
      "id": "a9ee05d96414b0bb1aec4b4c9d1f3f3593ec2e5e066ac7a98d0de937d99a6cb5",
      "name": "Primordial Harmony",
      "typeLine": "Cobalt Jewel",
      "identified": true,
      "ilvl": 74,
      "explicitMods": [
        "Golem Skills have 29% increased Cooldown Recovery Speed",
        "Golems have 41% increased Cooldown Recovery Speed",
        "19% increased Golem Damage for each Type of Golem you have Summoned",
        "Summoned Golems Regenerate 2% of their Life per second",
        "Primordial"
      ],
      "descrText": "Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.",
      "flavourText": [
        "\"A stone is not a stone.\r",
        "It is but one part of a fortress.\"\r",
        "- Ezomyte proverb"
      ],
      "frameType": 3,
      "x": 8,
      "y": 0,
      "inventoryId": "PassiveJewels",
      "type": "JewelInt"
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Jewels/GolemChaos.png?scale=1&w=1&h=1&v=9156abcc1addb87ac5e44b6d07e00969",
      "league": "Standard",
      "id": "7a16dbeaf9d45788c9be361d3df198954ced1bdbf7d2400a4f7f9869aaadbffe",
      "name": "The Anima Stone",
      "typeLine": "Prismatic Jewel",
      "identified": true,
      "ilvl": 64,
      "properties": [
        {
          "name": "Limited to",
          "values": [
            [
              "1",
              0
            ]
          ],
          "displayMode": 0
        }
      ],
      "explicitMods": [
        "+1 to maximum number of Golems",
        "+1 to maximum number of Summoned Golems if you have 3 Primordial Items Socketed or Equipped"
      ],
      "descrText": "Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.",
      "flavourText": [
        "All revere the earth they walk,\r",
        "For it wields strength beyond compare,\r",
        "Holds knowledge more than thought,\r",
        "Stands long after all else falls."
      ],
      "frameType": 3,
      "x": 19,
      "y": 0,
      "inventoryId": "PassiveJewels",
      "type": "JewelPrismatic"
    },
    {
      "verified": false,
      "w": 1,
      "h": 1,
      "icon": "https://web.poecdn.com/image/Art/2DItems/Jewels/GolemTempest.png?scale=1&w=1&h=1&v=42e2467180d63e0479f562543baa47e2",
      "league": "Standard",
      "id": "e5a1b25ccdebebb4a2046afd29bfb809ac81e47fc9cb7fc7a3fbde05d0958d01",
      "name": "Primordial Harmony",
      "typeLine": "Cobalt Jewel",
      "identified": true,
      "ilvl": 75,
      "explicitMods": [
        "Golem Skills have 25% increased Cooldown Recovery Speed",
        "Golems have 39% increased Cooldown Recovery Speed",
        "20% increased Golem Damage for each Type of Golem you have Summoned",
        "Summoned Golems Regenerate 2% of their Life per second",
        "Primordial"
      ],
      "descrText": "Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.",
      "flavourText": [
        "\"A stone is not a stone.\r",
        "It is but one part of a fortress.\"\r",
        "- Ezomyte proverb"
      ],
      "frameType": 3,
      "x": 6,
      "y": 0,
      "inventoryId": "PassiveJewels",
      "type": "JewelInt"
    }
  ],
  "jewel_slots": [
    26725,
    36634,
    33989,
    41263,
    60735,
    61834,
    31683,
    28475,
    6230,
    48768,
    34483,
    7960,
    46882,
    55190,
    61419,
    2491,
    54127,
    32763,
    26196,
    33631,
    21984
  ],
  "visual_overrides": []
}
\"")
	packr.PackJSONBytes(".", "get-passive-skills.raw.json", "\"{"hashes":[238,1031,1203,2292,4397,5152,5415,6204,6230,6712,7388,8930,10031,10490,10829,11420,11497,13009,13714,14936,15073,15405,15868,16167,16775,17546,17735,17821,18402,19144,19635,19939,20551,21330,21634,21958,22627,23027,24362,24383,26523,26866,27203,27611,27929,28330,29353,31683,31758,31875,32245,33479,33631,33740,33755,34098,34483,35503,36017,36047,36542,36634,36881,36949,37569,39085,39648,39818,41472,41967,42041,42583,42760,42837,44184,44202,44606,46578,46910,47251,48362,48423,48719,49254,50422,50862,53279,54159,55485,55646,57264,58449,60388,60398,60547,60554,61198,61419,61471,62021,63048,63447,63976,65034,65167],"items":[{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Jewels\/GhastlyEye.png?scale=1&w=1&h=1&v=118803f4aa870b0d556958d6a0634cee","league":"Standard","id":"345218fb4a10015b752540f9d54c8773805434c01d80638cc4189bf37659f3f6","abyssJewel":true,"name":"Foul Oculus","typeLine":"Ghastly Eye Jewel","identified":true,"ilvl":69,"properties":[{"name":"Abyss","values":[],"displayMode":0}],"requirements":[{"name":"Level","values":[["25",0]],"displayMode":0}],"explicitMods":["+27 to maximum Life","+25 to maximum Mana","2% additional Physical Damage Reduction if you weren't Damaged by a Hit Recently","Minions have 4% chance to Blind on Hit with Attacks"],"descrText":"Place into an Abyssal Socket on an Item or into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.","frameType":2,"x":10,"y":0,"inventoryId":"PassiveJewels","type":"JewelAbyssSummoner"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Jewels\/GolemInfernal.png?scale=1&w=1&h=1&v=898d3dbe66b3ad7915cba729df90a410","league":"Standard","id":"59266b08d59251f52da2ef6d81be10f31b14e76ea1586c92d5fd25621c6d2a61","name":"Primordial Might","typeLine":"Crimson Jewel","identified":true,"ilvl":73,"explicitMods":["30% increased Damage if you Summoned a Golem in the past 8 seconds","Golems Summoned in the past 8 seconds deal 39% increased Damage","Golems have 20% increased Maximum Life","Primordial","Summoned Golems are Aggressive"],"descrText":"Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.","flavourText":["\"Do not cause the land to stir,\r","It holds secrets better unknown.\"\r","- Azmerian proverb"],"frameType":3,"x":14,"y":0,"inventoryId":"PassiveJewels","type":"JewelStr"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Jewels\/SpectreJewel.png?scale=1&w=1&h=1&v=26b9ea7cfa94fd614007b5124ec4423d","league":"Standard","id":"bb2b05d9bbb427bb05cdeeee5dcf8921d0ce49bd5919741d78aa421aec67f0c5","name":"Unending Hunger","typeLine":"Cobalt Jewel","identified":true,"ilvl":69,"properties":[{"name":"Limited to","values":[["2",0]],"displayMode":0},{"name":"Radius","values":[["Medium",0]],"displayMode":0,"type":25}],"explicitMods":["Minions have 7% increased Area of Effect","With at least 40 Intelligence in Radius, Raised Spectres have a 50% chance to gain Soul Eater for 20 seconds on Kill"],"descrText":"Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.","flavourText":["They roamed, they fed, they grew,\r","Killing as they went,\r","Conquer though they may,\r","Their hearts will never be content."],"frameType":3,"x":1,"y":0,"inventoryId":"PassiveJewels","type":"JewelInt"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Jewels\/GolemTempest.png?scale=1&w=1&h=1&v=42e2467180d63e0479f562543baa47e2","league":"Standard","id":"a9ee05d96414b0bb1aec4b4c9d1f3f3593ec2e5e066ac7a98d0de937d99a6cb5","name":"Primordial Harmony","typeLine":"Cobalt Jewel","identified":true,"ilvl":74,"explicitMods":["Golem Skills have 29% increased Cooldown Recovery Speed","Golems have 41% increased Cooldown Recovery Speed","19% increased Golem Damage for each Type of Golem you have Summoned","Summoned Golems Regenerate 2% of their Life per second","Primordial"],"descrText":"Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.","flavourText":["\"A stone is not a stone.\r","It is but one part of a fortress.\"\r","- Ezomyte proverb"],"frameType":3,"x":8,"y":0,"inventoryId":"PassiveJewels","type":"JewelInt"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Jewels\/GolemChaos.png?scale=1&w=1&h=1&v=9156abcc1addb87ac5e44b6d07e00969","league":"Standard","id":"7a16dbeaf9d45788c9be361d3df198954ced1bdbf7d2400a4f7f9869aaadbffe","name":"The Anima Stone","typeLine":"Prismatic Jewel","identified":true,"ilvl":64,"properties":[{"name":"Limited to","values":[["1",0]],"displayMode":0}],"explicitMods":["+1 to maximum number of Golems","+1 to maximum number of Summoned Golems if you have 3 Primordial Items Socketed or Equipped"],"descrText":"Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.","flavourText":["All revere the earth they walk,\r","For it wields strength beyond compare,\r","Holds knowledge more than thought,\r","Stands long after all else falls."],"frameType":3,"x":19,"y":0,"inventoryId":"PassiveJewels","type":"JewelPrismatic"},{"verified":false,"w":1,"h":1,"icon":"https:\/\/web.poecdn.com\/image\/Art\/2DItems\/Jewels\/GolemTempest.png?scale=1&w=1&h=1&v=42e2467180d63e0479f562543baa47e2","league":"Standard","id":"e5a1b25ccdebebb4a2046afd29bfb809ac81e47fc9cb7fc7a3fbde05d0958d01","name":"Primordial Harmony","typeLine":"Cobalt Jewel","identified":true,"ilvl":75,"explicitMods":["Golem Skills have 25% increased Cooldown Recovery Speed","Golems have 39% increased Cooldown Recovery Speed","20% increased Golem Damage for each Type of Golem you have Summoned","Summoned Golems Regenerate 2% of their Life per second","Primordial"],"descrText":"Place into an allocated Jewel Socket on the Passive Skill Tree. Right click to remove from the Socket.","flavourText":["\"A stone is not a stone.\r","It is but one part of a fortress.\"\r","- Ezomyte proverb"],"frameType":3,"x":6,"y":0,"inventoryId":"PassiveJewels","type":"JewelInt"}],"jewel_slots":[26725,36634,33989,41263,60735,61834,31683,28475,6230,48768,34483,7960,46882,55190,61419,2491,54127,32763,26196,33631,21984],"visual_overrides":[]}\"")
}
